/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.talool.api.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Gift_t implements org.apache.thrift.TBase<Gift_t, Gift_t._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Gift_t");

  private static final org.apache.thrift.protocol.TField GIFT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("giftId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DEAL_ACQUIRE_FIELD_DESC = new org.apache.thrift.protocol.TField("dealAcquire", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("created", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField UPDATED_FIELD_DESC = new org.apache.thrift.protocol.TField("updated", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new Gift_tStandardSchemeFactory());
    schemes.put(TupleScheme.class, new Gift_tTupleSchemeFactory());
  }

  public String giftId; // required
  public DealAcquire_t dealAcquire; // required
  public String status; // required
  public long created; // optional
  public long updated; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GIFT_ID((short)1, "giftId"),
    DEAL_ACQUIRE((short)2, "dealAcquire"),
    STATUS((short)3, "status"),
    CREATED((short)4, "created"),
    UPDATED((short)5, "updated");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GIFT_ID
          return GIFT_ID;
        case 2: // DEAL_ACQUIRE
          return DEAL_ACQUIRE;
        case 3: // STATUS
          return STATUS;
        case 4: // CREATED
          return CREATED;
        case 5: // UPDATED
          return UPDATED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATED_ISSET_ID = 0;
  private static final int __UPDATED_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CREATED,_Fields.UPDATED};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GIFT_ID, new org.apache.thrift.meta_data.FieldMetaData("giftId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEAL_ACQUIRE, new org.apache.thrift.meta_data.FieldMetaData("dealAcquire", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DealAcquire_t.class)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATED, new org.apache.thrift.meta_data.FieldMetaData("created", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields.UPDATED, new org.apache.thrift.meta_data.FieldMetaData("updated", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Gift_t.class, metaDataMap);
  }

  public Gift_t() {
  }

  public Gift_t(
    String giftId,
    DealAcquire_t dealAcquire,
    String status)
  {
    this();
    this.giftId = giftId;
    this.dealAcquire = dealAcquire;
    this.status = status;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Gift_t(Gift_t other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetGiftId()) {
      this.giftId = other.giftId;
    }
    if (other.isSetDealAcquire()) {
      this.dealAcquire = new DealAcquire_t(other.dealAcquire);
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    this.created = other.created;
    this.updated = other.updated;
  }

  public Gift_t deepCopy() {
    return new Gift_t(this);
  }

  public void clear() {
    this.giftId = null;
    this.dealAcquire = null;
    this.status = null;
    setCreatedIsSet(false);
    this.created = 0;
    setUpdatedIsSet(false);
    this.updated = 0;
  }

  public String getGiftId() {
    return this.giftId;
  }

  public Gift_t setGiftId(String giftId) {
    this.giftId = giftId;
    return this;
  }

  public void unsetGiftId() {
    this.giftId = null;
  }

  /** Returns true if field giftId is set (has been assigned a value) and false otherwise */
  public boolean isSetGiftId() {
    return this.giftId != null;
  }

  public void setGiftIdIsSet(boolean value) {
    if (!value) {
      this.giftId = null;
    }
  }

  public DealAcquire_t getDealAcquire() {
    return this.dealAcquire;
  }

  public Gift_t setDealAcquire(DealAcquire_t dealAcquire) {
    this.dealAcquire = dealAcquire;
    return this;
  }

  public void unsetDealAcquire() {
    this.dealAcquire = null;
  }

  /** Returns true if field dealAcquire is set (has been assigned a value) and false otherwise */
  public boolean isSetDealAcquire() {
    return this.dealAcquire != null;
  }

  public void setDealAcquireIsSet(boolean value) {
    if (!value) {
      this.dealAcquire = null;
    }
  }

  public String getStatus() {
    return this.status;
  }

  public Gift_t setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public long getCreated() {
    return this.created;
  }

  public Gift_t setCreated(long created) {
    this.created = created;
    setCreatedIsSet(true);
    return this;
  }

  public void unsetCreated() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATED_ISSET_ID);
  }

  /** Returns true if field created is set (has been assigned a value) and false otherwise */
  public boolean isSetCreated() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATED_ISSET_ID);
  }

  public void setCreatedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATED_ISSET_ID, value);
  }

  public long getUpdated() {
    return this.updated;
  }

  public Gift_t setUpdated(long updated) {
    this.updated = updated;
    setUpdatedIsSet(true);
    return this;
  }

  public void unsetUpdated() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATED_ISSET_ID);
  }

  /** Returns true if field updated is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdated() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATED_ISSET_ID);
  }

  public void setUpdatedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GIFT_ID:
      if (value == null) {
        unsetGiftId();
      } else {
        setGiftId((String)value);
      }
      break;

    case DEAL_ACQUIRE:
      if (value == null) {
        unsetDealAcquire();
      } else {
        setDealAcquire((DealAcquire_t)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case CREATED:
      if (value == null) {
        unsetCreated();
      } else {
        setCreated((Long)value);
      }
      break;

    case UPDATED:
      if (value == null) {
        unsetUpdated();
      } else {
        setUpdated((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GIFT_ID:
      return getGiftId();

    case DEAL_ACQUIRE:
      return getDealAcquire();

    case STATUS:
      return getStatus();

    case CREATED:
      return Long.valueOf(getCreated());

    case UPDATED:
      return Long.valueOf(getUpdated());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GIFT_ID:
      return isSetGiftId();
    case DEAL_ACQUIRE:
      return isSetDealAcquire();
    case STATUS:
      return isSetStatus();
    case CREATED:
      return isSetCreated();
    case UPDATED:
      return isSetUpdated();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Gift_t)
      return this.equals((Gift_t)that);
    return false;
  }

  public boolean equals(Gift_t that) {
    if (that == null)
      return false;

    boolean this_present_giftId = true && this.isSetGiftId();
    boolean that_present_giftId = true && that.isSetGiftId();
    if (this_present_giftId || that_present_giftId) {
      if (!(this_present_giftId && that_present_giftId))
        return false;
      if (!this.giftId.equals(that.giftId))
        return false;
    }

    boolean this_present_dealAcquire = true && this.isSetDealAcquire();
    boolean that_present_dealAcquire = true && that.isSetDealAcquire();
    if (this_present_dealAcquire || that_present_dealAcquire) {
      if (!(this_present_dealAcquire && that_present_dealAcquire))
        return false;
      if (!this.dealAcquire.equals(that.dealAcquire))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_created = true && this.isSetCreated();
    boolean that_present_created = true && that.isSetCreated();
    if (this_present_created || that_present_created) {
      if (!(this_present_created && that_present_created))
        return false;
      if (this.created != that.created)
        return false;
    }

    boolean this_present_updated = true && this.isSetUpdated();
    boolean that_present_updated = true && that.isSetUpdated();
    if (this_present_updated || that_present_updated) {
      if (!(this_present_updated && that_present_updated))
        return false;
      if (this.updated != that.updated)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Gift_t other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Gift_t typedOther = (Gift_t)other;

    lastComparison = Boolean.valueOf(isSetGiftId()).compareTo(typedOther.isSetGiftId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGiftId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giftId, typedOther.giftId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDealAcquire()).compareTo(typedOther.isSetDealAcquire());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDealAcquire()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dealAcquire, typedOther.dealAcquire);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreated()).compareTo(typedOther.isSetCreated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.created, typedOther.created);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdated()).compareTo(typedOther.isSetUpdated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updated, typedOther.updated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Gift_t(");
    boolean first = true;

    sb.append("giftId:");
    if (this.giftId == null) {
      sb.append("null");
    } else {
      sb.append(this.giftId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dealAcquire:");
    if (this.dealAcquire == null) {
      sb.append("null");
    } else {
      sb.append(this.dealAcquire);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (isSetCreated()) {
      if (!first) sb.append(", ");
      sb.append("created:");
      sb.append(this.created);
      first = false;
    }
    if (isSetUpdated()) {
      if (!first) sb.append(", ");
      sb.append("updated:");
      sb.append(this.updated);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (giftId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'giftId' was not present! Struct: " + toString());
    }
    if (dealAcquire == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dealAcquire' was not present! Struct: " + toString());
    }
    if (status == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (dealAcquire != null) {
      dealAcquire.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class Gift_tStandardSchemeFactory implements SchemeFactory {
    public Gift_tStandardScheme getScheme() {
      return new Gift_tStandardScheme();
    }
  }

  private static class Gift_tStandardScheme extends StandardScheme<Gift_t> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Gift_t struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GIFT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.giftId = iprot.readString();
              struct.setGiftIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEAL_ACQUIRE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dealAcquire = new DealAcquire_t();
              struct.dealAcquire.read(iprot);
              struct.setDealAcquireIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREATED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.created = iprot.readI64();
              struct.setCreatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // UPDATED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updated = iprot.readI64();
              struct.setUpdatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Gift_t struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.giftId != null) {
        oprot.writeFieldBegin(GIFT_ID_FIELD_DESC);
        oprot.writeString(struct.giftId);
        oprot.writeFieldEnd();
      }
      if (struct.dealAcquire != null) {
        oprot.writeFieldBegin(DEAL_ACQUIRE_FIELD_DESC);
        struct.dealAcquire.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreated()) {
        oprot.writeFieldBegin(CREATED_FIELD_DESC);
        oprot.writeI64(struct.created);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUpdated()) {
        oprot.writeFieldBegin(UPDATED_FIELD_DESC);
        oprot.writeI64(struct.updated);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class Gift_tTupleSchemeFactory implements SchemeFactory {
    public Gift_tTupleScheme getScheme() {
      return new Gift_tTupleScheme();
    }
  }

  private static class Gift_tTupleScheme extends TupleScheme<Gift_t> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Gift_t struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.giftId);
      struct.dealAcquire.write(oprot);
      oprot.writeString(struct.status);
      BitSet optionals = new BitSet();
      if (struct.isSetCreated()) {
        optionals.set(0);
      }
      if (struct.isSetUpdated()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetCreated()) {
        oprot.writeI64(struct.created);
      }
      if (struct.isSetUpdated()) {
        oprot.writeI64(struct.updated);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Gift_t struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.giftId = iprot.readString();
      struct.setGiftIdIsSet(true);
      struct.dealAcquire = new DealAcquire_t();
      struct.dealAcquire.read(iprot);
      struct.setDealAcquireIsSet(true);
      struct.status = iprot.readString();
      struct.setStatusIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.created = iprot.readI64();
        struct.setCreatedIsSet(true);
      }
      if (incoming.get(1)) {
        struct.updated = iprot.readI64();
        struct.setUpdatedIsSet(true);
      }
    }
  }

}

