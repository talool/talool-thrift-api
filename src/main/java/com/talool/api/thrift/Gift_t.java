/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.talool.api.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Gift_t implements org.apache.thrift.TBase<Gift_t, Gift_t._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Gift_t");

  private static final org.apache.thrift.protocol.TField GIFT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("giftId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DEAL_FIELD_DESC = new org.apache.thrift.protocol.TField("deal", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField FROM_CUSTOMER_FIELD_DESC = new org.apache.thrift.protocol.TField("fromCustomer", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("created", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new Gift_tStandardSchemeFactory());
    schemes.put(TupleScheme.class, new Gift_tTupleSchemeFactory());
  }

  public String giftId; // required
  public Deal_t deal; // required
  public Customer_t fromCustomer; // required
  public long created; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GIFT_ID((short)1, "giftId"),
    DEAL((short)2, "deal"),
    FROM_CUSTOMER((short)3, "fromCustomer"),
    CREATED((short)4, "created");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GIFT_ID
          return GIFT_ID;
        case 2: // DEAL
          return DEAL;
        case 3: // FROM_CUSTOMER
          return FROM_CUSTOMER;
        case 4: // CREATED
          return CREATED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATED_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GIFT_ID, new org.apache.thrift.meta_data.FieldMetaData("giftId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEAL, new org.apache.thrift.meta_data.FieldMetaData("deal", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Deal_t.class)));
    tmpMap.put(_Fields.FROM_CUSTOMER, new org.apache.thrift.meta_data.FieldMetaData("fromCustomer", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Customer_t.class)));
    tmpMap.put(_Fields.CREATED, new org.apache.thrift.meta_data.FieldMetaData("created", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Gift_t.class, metaDataMap);
  }

  public Gift_t() {
  }

  public Gift_t(
    String giftId,
    Deal_t deal,
    Customer_t fromCustomer,
    long created)
  {
    this();
    this.giftId = giftId;
    this.deal = deal;
    this.fromCustomer = fromCustomer;
    this.created = created;
    setCreatedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Gift_t(Gift_t other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetGiftId()) {
      this.giftId = other.giftId;
    }
    if (other.isSetDeal()) {
      this.deal = new Deal_t(other.deal);
    }
    if (other.isSetFromCustomer()) {
      this.fromCustomer = new Customer_t(other.fromCustomer);
    }
    this.created = other.created;
  }

  public Gift_t deepCopy() {
    return new Gift_t(this);
  }

  public void clear() {
    this.giftId = null;
    this.deal = null;
    this.fromCustomer = null;
    setCreatedIsSet(false);
    this.created = 0;
  }

  public String getGiftId() {
    return this.giftId;
  }

  public Gift_t setGiftId(String giftId) {
    this.giftId = giftId;
    return this;
  }

  public void unsetGiftId() {
    this.giftId = null;
  }

  /** Returns true if field giftId is set (has been assigned a value) and false otherwise */
  public boolean isSetGiftId() {
    return this.giftId != null;
  }

  public void setGiftIdIsSet(boolean value) {
    if (!value) {
      this.giftId = null;
    }
  }

  public Deal_t getDeal() {
    return this.deal;
  }

  public Gift_t setDeal(Deal_t deal) {
    this.deal = deal;
    return this;
  }

  public void unsetDeal() {
    this.deal = null;
  }

  /** Returns true if field deal is set (has been assigned a value) and false otherwise */
  public boolean isSetDeal() {
    return this.deal != null;
  }

  public void setDealIsSet(boolean value) {
    if (!value) {
      this.deal = null;
    }
  }

  public Customer_t getFromCustomer() {
    return this.fromCustomer;
  }

  public Gift_t setFromCustomer(Customer_t fromCustomer) {
    this.fromCustomer = fromCustomer;
    return this;
  }

  public void unsetFromCustomer() {
    this.fromCustomer = null;
  }

  /** Returns true if field fromCustomer is set (has been assigned a value) and false otherwise */
  public boolean isSetFromCustomer() {
    return this.fromCustomer != null;
  }

  public void setFromCustomerIsSet(boolean value) {
    if (!value) {
      this.fromCustomer = null;
    }
  }

  public long getCreated() {
    return this.created;
  }

  public Gift_t setCreated(long created) {
    this.created = created;
    setCreatedIsSet(true);
    return this;
  }

  public void unsetCreated() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATED_ISSET_ID);
  }

  /** Returns true if field created is set (has been assigned a value) and false otherwise */
  public boolean isSetCreated() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATED_ISSET_ID);
  }

  public void setCreatedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GIFT_ID:
      if (value == null) {
        unsetGiftId();
      } else {
        setGiftId((String)value);
      }
      break;

    case DEAL:
      if (value == null) {
        unsetDeal();
      } else {
        setDeal((Deal_t)value);
      }
      break;

    case FROM_CUSTOMER:
      if (value == null) {
        unsetFromCustomer();
      } else {
        setFromCustomer((Customer_t)value);
      }
      break;

    case CREATED:
      if (value == null) {
        unsetCreated();
      } else {
        setCreated((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GIFT_ID:
      return getGiftId();

    case DEAL:
      return getDeal();

    case FROM_CUSTOMER:
      return getFromCustomer();

    case CREATED:
      return Long.valueOf(getCreated());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GIFT_ID:
      return isSetGiftId();
    case DEAL:
      return isSetDeal();
    case FROM_CUSTOMER:
      return isSetFromCustomer();
    case CREATED:
      return isSetCreated();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Gift_t)
      return this.equals((Gift_t)that);
    return false;
  }

  public boolean equals(Gift_t that) {
    if (that == null)
      return false;

    boolean this_present_giftId = true && this.isSetGiftId();
    boolean that_present_giftId = true && that.isSetGiftId();
    if (this_present_giftId || that_present_giftId) {
      if (!(this_present_giftId && that_present_giftId))
        return false;
      if (!this.giftId.equals(that.giftId))
        return false;
    }

    boolean this_present_deal = true && this.isSetDeal();
    boolean that_present_deal = true && that.isSetDeal();
    if (this_present_deal || that_present_deal) {
      if (!(this_present_deal && that_present_deal))
        return false;
      if (!this.deal.equals(that.deal))
        return false;
    }

    boolean this_present_fromCustomer = true && this.isSetFromCustomer();
    boolean that_present_fromCustomer = true && that.isSetFromCustomer();
    if (this_present_fromCustomer || that_present_fromCustomer) {
      if (!(this_present_fromCustomer && that_present_fromCustomer))
        return false;
      if (!this.fromCustomer.equals(that.fromCustomer))
        return false;
    }

    boolean this_present_created = true;
    boolean that_present_created = true;
    if (this_present_created || that_present_created) {
      if (!(this_present_created && that_present_created))
        return false;
      if (this.created != that.created)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Gift_t other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Gift_t typedOther = (Gift_t)other;

    lastComparison = Boolean.valueOf(isSetGiftId()).compareTo(typedOther.isSetGiftId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGiftId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giftId, typedOther.giftId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeal()).compareTo(typedOther.isSetDeal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deal, typedOther.deal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromCustomer()).compareTo(typedOther.isSetFromCustomer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromCustomer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromCustomer, typedOther.fromCustomer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreated()).compareTo(typedOther.isSetCreated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.created, typedOther.created);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Gift_t(");
    boolean first = true;

    sb.append("giftId:");
    if (this.giftId == null) {
      sb.append("null");
    } else {
      sb.append(this.giftId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deal:");
    if (this.deal == null) {
      sb.append("null");
    } else {
      sb.append(this.deal);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromCustomer:");
    if (this.fromCustomer == null) {
      sb.append("null");
    } else {
      sb.append(this.fromCustomer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("created:");
    sb.append(this.created);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (giftId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'giftId' was not present! Struct: " + toString());
    }
    if (deal == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'deal' was not present! Struct: " + toString());
    }
    if (fromCustomer == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fromCustomer' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'created' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (deal != null) {
      deal.validate();
    }
    if (fromCustomer != null) {
      fromCustomer.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class Gift_tStandardSchemeFactory implements SchemeFactory {
    public Gift_tStandardScheme getScheme() {
      return new Gift_tStandardScheme();
    }
  }

  private static class Gift_tStandardScheme extends StandardScheme<Gift_t> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Gift_t struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GIFT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.giftId = iprot.readString();
              struct.setGiftIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.deal = new Deal_t();
              struct.deal.read(iprot);
              struct.setDealIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FROM_CUSTOMER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fromCustomer = new Customer_t();
              struct.fromCustomer.read(iprot);
              struct.setFromCustomerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREATED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.created = iprot.readI64();
              struct.setCreatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCreated()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'created' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Gift_t struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.giftId != null) {
        oprot.writeFieldBegin(GIFT_ID_FIELD_DESC);
        oprot.writeString(struct.giftId);
        oprot.writeFieldEnd();
      }
      if (struct.deal != null) {
        oprot.writeFieldBegin(DEAL_FIELD_DESC);
        struct.deal.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.fromCustomer != null) {
        oprot.writeFieldBegin(FROM_CUSTOMER_FIELD_DESC);
        struct.fromCustomer.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATED_FIELD_DESC);
      oprot.writeI64(struct.created);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class Gift_tTupleSchemeFactory implements SchemeFactory {
    public Gift_tTupleScheme getScheme() {
      return new Gift_tTupleScheme();
    }
  }

  private static class Gift_tTupleScheme extends TupleScheme<Gift_t> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Gift_t struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.giftId);
      struct.deal.write(oprot);
      struct.fromCustomer.write(oprot);
      oprot.writeI64(struct.created);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Gift_t struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.giftId = iprot.readString();
      struct.setGiftIdIsSet(true);
      struct.deal = new Deal_t();
      struct.deal.read(iprot);
      struct.setDealIsSet(true);
      struct.fromCustomer = new Customer_t();
      struct.fromCustomer.read(iprot);
      struct.setFromCustomerIsSet(true);
      struct.created = iprot.readI64();
      struct.setCreatedIsSet(true);
    }
  }

}

