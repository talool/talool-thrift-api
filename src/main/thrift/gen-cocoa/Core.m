/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"


#import "Core.h"

@implementation ServiceException_t

- (id) init
{
  return [super initWithName: @"ServiceException_t" reason: @"unknown" userInfo: nil];
}

- (id) initWithErrorCode: (int32_t) errorCode errorDesc: (NSString *) errorDesc
{
  self = [self init];
  __errorCode = errorCode;
  __errorCode_isset = YES;
  __errorDesc = [errorDesc retain_stub];
  __errorDesc_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if ([decoder containsValueForKey: @"errorCode"])
  {
    __errorCode = [decoder decodeInt32ForKey: @"errorCode"];
    __errorCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"errorDesc"])
  {
    __errorDesc = [[decoder decodeObjectForKey: @"errorDesc"] retain_stub];
    __errorDesc_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
  if (__errorCode_isset)
  {
    [encoder encodeInt32: __errorCode forKey: @"errorCode"];
  }
  if (__errorDesc_isset)
  {
    [encoder encodeObject: __errorDesc forKey: @"errorDesc"];
  }
}

- (void) dealloc
{
  [__errorDesc release_stub];
  [super dealloc_stub];
}

- (int32_t) errorCode {
  return __errorCode;
}

- (void) setErrorCode: (int32_t) errorCode {
  __errorCode = errorCode;
  __errorCode_isset = YES;
}

- (BOOL) errorCodeIsSet {
  return __errorCode_isset;
}

- (void) unsetErrorCode {
  __errorCode_isset = NO;
}

- (NSString *) errorDesc {
  return [[__errorDesc retain_stub] autorelease_stub];
}

- (void) setErrorDesc: (NSString *) errorDesc {
  [errorDesc retain_stub];
  [__errorDesc release_stub];
  __errorDesc = errorDesc;
  __errorDesc_isset = YES;
}

- (BOOL) errorDescIsSet {
  return __errorDesc_isset;
}

- (void) unsetErrorDesc {
  [__errorDesc release_stub];
  __errorDesc = nil;
  __errorDesc_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setErrorCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setErrorDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ServiceException_t"];
  if (__errorCode_isset) {
    [outProtocol writeFieldBeginWithName: @"errorCode" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __errorCode];
    [outProtocol writeFieldEnd];
  }
  if (__errorDesc_isset) {
    if (__errorDesc != nil) {
      [outProtocol writeFieldBeginWithName: @"errorDesc" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __errorDesc];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ServiceException_t("];
  [ms appendString: @"errorCode:"];
  [ms appendFormat: @"%i", __errorCode];
  [ms appendString: @",errorDesc:"];
  [ms appendFormat: @"\"%@\"", __errorDesc];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Category_t

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCategoryId: (int32_t) categoryId name: (NSString *) name
{
  self = [super init];
  __categoryId = categoryId;
  __categoryId_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"categoryId"])
  {
    __categoryId = [decoder decodeInt32ForKey: @"categoryId"];
    __categoryId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__categoryId_isset)
  {
    [encoder encodeInt32: __categoryId forKey: @"categoryId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
}

- (void) dealloc
{
  [__name release_stub];
  [super dealloc_stub];
}

- (int32_t) categoryId {
  return __categoryId;
}

- (void) setCategoryId: (int32_t) categoryId {
  __categoryId = categoryId;
  __categoryId_isset = YES;
}

- (BOOL) categoryIdIsSet {
  return __categoryId_isset;
}

- (void) unsetCategoryId {
  __categoryId_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCategoryId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Category_t"];
  if (__categoryId_isset) {
    [outProtocol writeFieldBeginWithName: @"categoryId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __categoryId];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Category_t("];
  [ms appendString: @"categoryId:"];
  [ms appendFormat: @"%i", __categoryId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Location_t

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithLongitude: (double) longitude latitude: (double) latitude
{
  self = [super init];
  __longitude = longitude;
  __longitude_isset = YES;
  __latitude = latitude;
  __latitude_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"longitude"])
  {
    __longitude = [decoder decodeDoubleForKey: @"longitude"];
    __longitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"latitude"])
  {
    __latitude = [decoder decodeDoubleForKey: @"latitude"];
    __latitude_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__longitude_isset)
  {
    [encoder encodeDouble: __longitude forKey: @"longitude"];
  }
  if (__latitude_isset)
  {
    [encoder encodeDouble: __latitude forKey: @"latitude"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (double) longitude {
  return __longitude;
}

- (void) setLongitude: (double) longitude {
  __longitude = longitude;
  __longitude_isset = YES;
}

- (BOOL) longitudeIsSet {
  return __longitude_isset;
}

- (void) unsetLongitude {
  __longitude_isset = NO;
}

- (double) latitude {
  return __latitude;
}

- (void) setLatitude: (double) latitude {
  __latitude = latitude;
  __latitude_isset = YES;
}

- (BOOL) latitudeIsSet {
  return __latitude_isset;
}

- (void) unsetLatitude {
  __latitude_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLongitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLatitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Location_t"];
  if (__longitude_isset) {
    [outProtocol writeFieldBeginWithName: @"longitude" type: TType_DOUBLE fieldID: 1];
    [outProtocol writeDouble: __longitude];
    [outProtocol writeFieldEnd];
  }
  if (__latitude_isset) {
    [outProtocol writeFieldBeginWithName: @"latitude" type: TType_DOUBLE fieldID: 2];
    [outProtocol writeDouble: __latitude];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Location_t("];
  [ms appendString: @"longitude:"];
  [ms appendFormat: @"%f", __longitude];
  [ms appendString: @",latitude:"];
  [ms appendFormat: @"%f", __latitude];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SocialNetworkDetail_t

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSocalNetwork: (int) socalNetwork name: (NSString *) name website: (NSString *) website apiUrl: (NSString *) apiUrl
{
  self = [super init];
  __socalNetwork = socalNetwork;
  __socalNetwork_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __website = [website retain_stub];
  __website_isset = YES;
  __apiUrl = [apiUrl retain_stub];
  __apiUrl_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"socalNetwork"])
  {
    __socalNetwork = [decoder decodeIntForKey: @"socalNetwork"];
    __socalNetwork_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"website"])
  {
    __website = [[decoder decodeObjectForKey: @"website"] retain_stub];
    __website_isset = YES;
  }
  if ([decoder containsValueForKey: @"apiUrl"])
  {
    __apiUrl = [[decoder decodeObjectForKey: @"apiUrl"] retain_stub];
    __apiUrl_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__socalNetwork_isset)
  {
    [encoder encodeInt: __socalNetwork forKey: @"socalNetwork"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__website_isset)
  {
    [encoder encodeObject: __website forKey: @"website"];
  }
  if (__apiUrl_isset)
  {
    [encoder encodeObject: __apiUrl forKey: @"apiUrl"];
  }
}

- (void) dealloc
{
  [__name release_stub];
  [__website release_stub];
  [__apiUrl release_stub];
  [super dealloc_stub];
}

- (int) socalNetwork {
  return __socalNetwork;
}

- (void) setSocalNetwork: (int) socalNetwork {
  __socalNetwork = socalNetwork;
  __socalNetwork_isset = YES;
}

- (BOOL) socalNetworkIsSet {
  return __socalNetwork_isset;
}

- (void) unsetSocalNetwork {
  __socalNetwork_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) website {
  return [[__website retain_stub] autorelease_stub];
}

- (void) setWebsite: (NSString *) website {
  [website retain_stub];
  [__website release_stub];
  __website = website;
  __website_isset = YES;
}

- (BOOL) websiteIsSet {
  return __website_isset;
}

- (void) unsetWebsite {
  [__website release_stub];
  __website = nil;
  __website_isset = NO;
}

- (NSString *) apiUrl {
  return [[__apiUrl retain_stub] autorelease_stub];
}

- (void) setApiUrl: (NSString *) apiUrl {
  [apiUrl retain_stub];
  [__apiUrl release_stub];
  __apiUrl = apiUrl;
  __apiUrl_isset = YES;
}

- (BOOL) apiUrlIsSet {
  return __apiUrl_isset;
}

- (void) unsetApiUrl {
  [__apiUrl release_stub];
  __apiUrl = nil;
  __apiUrl_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setSocalNetwork: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setWebsite: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApiUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SocialNetworkDetail_t"];
  if (__socalNetwork_isset) {
    [outProtocol writeFieldBeginWithName: @"socalNetwork" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __socalNetwork];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__website_isset) {
    if (__website != nil) {
      [outProtocol writeFieldBeginWithName: @"website" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __website];
      [outProtocol writeFieldEnd];
    }
  }
  if (__apiUrl_isset) {
    if (__apiUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"apiUrl" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __apiUrl];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SocialNetworkDetail_t("];
  [ms appendString: @"socalNetwork:"];
  [ms appendFormat: @"%i", __socalNetwork];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",website:"];
  [ms appendFormat: @"\"%@\"", __website];
  [ms appendString: @",apiUrl:"];
  [ms appendFormat: @"\"%@\"", __apiUrl];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SocialAccount_t

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSocialNetwork: (int) socialNetwork loginId: (NSString *) loginId created: (Timestamp) created
{
  self = [super init];
  __socialNetwork = socialNetwork;
  __socialNetwork_isset = YES;
  __loginId = [loginId retain_stub];
  __loginId_isset = YES;
  __created = created;
  __created_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"socialNetwork"])
  {
    __socialNetwork = [decoder decodeIntForKey: @"socialNetwork"];
    __socialNetwork_isset = YES;
  }
  if ([decoder containsValueForKey: @"loginId"])
  {
    __loginId = [[decoder decodeObjectForKey: @"loginId"] retain_stub];
    __loginId_isset = YES;
  }
  if ([decoder containsValueForKey: @"created"])
  {
    __created = [decoder decodeInt64ForKey: @"created"];
    __created_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__socialNetwork_isset)
  {
    [encoder encodeInt: __socialNetwork forKey: @"socialNetwork"];
  }
  if (__loginId_isset)
  {
    [encoder encodeObject: __loginId forKey: @"loginId"];
  }
  if (__created_isset)
  {
    [encoder encodeInt64: __created forKey: @"created"];
  }
}

- (void) dealloc
{
  [__loginId release_stub];
  [super dealloc_stub];
}

- (int) socialNetwork {
  return __socialNetwork;
}

- (void) setSocialNetwork: (int) socialNetwork {
  __socialNetwork = socialNetwork;
  __socialNetwork_isset = YES;
}

- (BOOL) socialNetworkIsSet {
  return __socialNetwork_isset;
}

- (void) unsetSocialNetwork {
  __socialNetwork_isset = NO;
}

- (NSString *) loginId {
  return [[__loginId retain_stub] autorelease_stub];
}

- (void) setLoginId: (NSString *) loginId {
  [loginId retain_stub];
  [__loginId release_stub];
  __loginId = loginId;
  __loginId_isset = YES;
}

- (BOOL) loginIdIsSet {
  return __loginId_isset;
}

- (void) unsetLoginId {
  [__loginId release_stub];
  __loginId = nil;
  __loginId_isset = NO;
}

- (int64_t) created {
  return __created;
}

- (void) setCreated: (int64_t) created {
  __created = created;
  __created_isset = YES;
}

- (BOOL) createdIsSet {
  return __created_isset;
}

- (void) unsetCreated {
  __created_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setSocialNetwork: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLoginId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCreated: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SocialAccount_t"];
  if (__socialNetwork_isset) {
    [outProtocol writeFieldBeginWithName: @"socialNetwork" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __socialNetwork];
    [outProtocol writeFieldEnd];
  }
  if (__loginId_isset) {
    if (__loginId != nil) {
      [outProtocol writeFieldBeginWithName: @"loginId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __loginId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__created_isset) {
    [outProtocol writeFieldBeginWithName: @"created" type: TType_I64 fieldID: 20];
    [outProtocol writeI64: __created];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SocialAccount_t("];
  [ms appendString: @"socialNetwork:"];
  [ms appendFormat: @"%i", __socialNetwork];
  [ms appendString: @",loginId:"];
  [ms appendFormat: @"\"%@\"", __loginId];
  [ms appendString: @",created:"];
  [ms appendFormat: @"%qi", __created];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Address_t

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAddress1: (NSString *) address1 address2: (NSString *) address2 city: (NSString *) city stateProvinceCounty: (NSString *) stateProvinceCounty zip: (NSString *) zip country: (NSString *) country
{
  self = [super init];
  __address1 = [address1 retain_stub];
  __address1_isset = YES;
  __address2 = [address2 retain_stub];
  __address2_isset = YES;
  __city = [city retain_stub];
  __city_isset = YES;
  __stateProvinceCounty = [stateProvinceCounty retain_stub];
  __stateProvinceCounty_isset = YES;
  __zip = [zip retain_stub];
  __zip_isset = YES;
  __country = [country retain_stub];
  __country_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"address1"])
  {
    __address1 = [[decoder decodeObjectForKey: @"address1"] retain_stub];
    __address1_isset = YES;
  }
  if ([decoder containsValueForKey: @"address2"])
  {
    __address2 = [[decoder decodeObjectForKey: @"address2"] retain_stub];
    __address2_isset = YES;
  }
  if ([decoder containsValueForKey: @"city"])
  {
    __city = [[decoder decodeObjectForKey: @"city"] retain_stub];
    __city_isset = YES;
  }
  if ([decoder containsValueForKey: @"stateProvinceCounty"])
  {
    __stateProvinceCounty = [[decoder decodeObjectForKey: @"stateProvinceCounty"] retain_stub];
    __stateProvinceCounty_isset = YES;
  }
  if ([decoder containsValueForKey: @"zip"])
  {
    __zip = [[decoder decodeObjectForKey: @"zip"] retain_stub];
    __zip_isset = YES;
  }
  if ([decoder containsValueForKey: @"country"])
  {
    __country = [[decoder decodeObjectForKey: @"country"] retain_stub];
    __country_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__address1_isset)
  {
    [encoder encodeObject: __address1 forKey: @"address1"];
  }
  if (__address2_isset)
  {
    [encoder encodeObject: __address2 forKey: @"address2"];
  }
  if (__city_isset)
  {
    [encoder encodeObject: __city forKey: @"city"];
  }
  if (__stateProvinceCounty_isset)
  {
    [encoder encodeObject: __stateProvinceCounty forKey: @"stateProvinceCounty"];
  }
  if (__zip_isset)
  {
    [encoder encodeObject: __zip forKey: @"zip"];
  }
  if (__country_isset)
  {
    [encoder encodeObject: __country forKey: @"country"];
  }
}

- (void) dealloc
{
  [__address1 release_stub];
  [__address2 release_stub];
  [__city release_stub];
  [__stateProvinceCounty release_stub];
  [__zip release_stub];
  [__country release_stub];
  [super dealloc_stub];
}

- (NSString *) address1 {
  return [[__address1 retain_stub] autorelease_stub];
}

- (void) setAddress1: (NSString *) address1 {
  [address1 retain_stub];
  [__address1 release_stub];
  __address1 = address1;
  __address1_isset = YES;
}

- (BOOL) address1IsSet {
  return __address1_isset;
}

- (void) unsetAddress1 {
  [__address1 release_stub];
  __address1 = nil;
  __address1_isset = NO;
}

- (NSString *) address2 {
  return [[__address2 retain_stub] autorelease_stub];
}

- (void) setAddress2: (NSString *) address2 {
  [address2 retain_stub];
  [__address2 release_stub];
  __address2 = address2;
  __address2_isset = YES;
}

- (BOOL) address2IsSet {
  return __address2_isset;
}

- (void) unsetAddress2 {
  [__address2 release_stub];
  __address2 = nil;
  __address2_isset = NO;
}

- (NSString *) city {
  return [[__city retain_stub] autorelease_stub];
}

- (void) setCity: (NSString *) city {
  [city retain_stub];
  [__city release_stub];
  __city = city;
  __city_isset = YES;
}

- (BOOL) cityIsSet {
  return __city_isset;
}

- (void) unsetCity {
  [__city release_stub];
  __city = nil;
  __city_isset = NO;
}

- (NSString *) stateProvinceCounty {
  return [[__stateProvinceCounty retain_stub] autorelease_stub];
}

- (void) setStateProvinceCounty: (NSString *) stateProvinceCounty {
  [stateProvinceCounty retain_stub];
  [__stateProvinceCounty release_stub];
  __stateProvinceCounty = stateProvinceCounty;
  __stateProvinceCounty_isset = YES;
}

- (BOOL) stateProvinceCountyIsSet {
  return __stateProvinceCounty_isset;
}

- (void) unsetStateProvinceCounty {
  [__stateProvinceCounty release_stub];
  __stateProvinceCounty = nil;
  __stateProvinceCounty_isset = NO;
}

- (NSString *) zip {
  return [[__zip retain_stub] autorelease_stub];
}

- (void) setZip: (NSString *) zip {
  [zip retain_stub];
  [__zip release_stub];
  __zip = zip;
  __zip_isset = YES;
}

- (BOOL) zipIsSet {
  return __zip_isset;
}

- (void) unsetZip {
  [__zip release_stub];
  __zip = nil;
  __zip_isset = NO;
}

- (NSString *) country {
  return [[__country retain_stub] autorelease_stub];
}

- (void) setCountry: (NSString *) country {
  [country retain_stub];
  [__country release_stub];
  __country = country;
  __country_isset = YES;
}

- (BOOL) countryIsSet {
  return __country_isset;
}

- (void) unsetCountry {
  [__country release_stub];
  __country = nil;
  __country_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddress1: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddress2: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCity: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStateProvinceCounty: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setZip: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCountry: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Address_t"];
  if (__address1_isset) {
    if (__address1 != nil) {
      [outProtocol writeFieldBeginWithName: @"address1" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __address1];
      [outProtocol writeFieldEnd];
    }
  }
  if (__address2_isset) {
    if (__address2 != nil) {
      [outProtocol writeFieldBeginWithName: @"address2" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __address2];
      [outProtocol writeFieldEnd];
    }
  }
  if (__city_isset) {
    if (__city != nil) {
      [outProtocol writeFieldBeginWithName: @"city" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __city];
      [outProtocol writeFieldEnd];
    }
  }
  if (__stateProvinceCounty_isset) {
    if (__stateProvinceCounty != nil) {
      [outProtocol writeFieldBeginWithName: @"stateProvinceCounty" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __stateProvinceCounty];
      [outProtocol writeFieldEnd];
    }
  }
  if (__zip_isset) {
    if (__zip != nil) {
      [outProtocol writeFieldBeginWithName: @"zip" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __zip];
      [outProtocol writeFieldEnd];
    }
  }
  if (__country_isset) {
    if (__country != nil) {
      [outProtocol writeFieldBeginWithName: @"country" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __country];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Address_t("];
  [ms appendString: @"address1:"];
  [ms appendFormat: @"\"%@\"", __address1];
  [ms appendString: @",address2:"];
  [ms appendFormat: @"\"%@\"", __address2];
  [ms appendString: @",city:"];
  [ms appendFormat: @"\"%@\"", __city];
  [ms appendString: @",stateProvinceCounty:"];
  [ms appendFormat: @"\"%@\"", __stateProvinceCounty];
  [ms appendString: @",zip:"];
  [ms appendFormat: @"\"%@\"", __zip];
  [ms appendString: @",country:"];
  [ms appendFormat: @"\"%@\"", __country];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MerchantLocation_t

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithLocationId: (int64_t) locationId name: (NSString *) name email: (NSString *) email websiteUrl: (NSString *) websiteUrl logoUrl: (NSString *) logoUrl merchantImageUrl: (NSString *) merchantImageUrl phone: (NSString *) phone location: (Location_t *) location address: (Address_t *) address distanceInMeters: (double) distanceInMeters
{
  self = [super init];
  __locationId = locationId;
  __locationId_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __email = [email retain_stub];
  __email_isset = YES;
  __websiteUrl = [websiteUrl retain_stub];
  __websiteUrl_isset = YES;
  __logoUrl = [logoUrl retain_stub];
  __logoUrl_isset = YES;
  __merchantImageUrl = [merchantImageUrl retain_stub];
  __merchantImageUrl_isset = YES;
  __phone = [phone retain_stub];
  __phone_isset = YES;
  __location = [location retain_stub];
  __location_isset = YES;
  __address = [address retain_stub];
  __address_isset = YES;
  __distanceInMeters = distanceInMeters;
  __distanceInMeters_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"locationId"])
  {
    __locationId = [decoder decodeInt64ForKey: @"locationId"];
    __locationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  if ([decoder containsValueForKey: @"websiteUrl"])
  {
    __websiteUrl = [[decoder decodeObjectForKey: @"websiteUrl"] retain_stub];
    __websiteUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"logoUrl"])
  {
    __logoUrl = [[decoder decodeObjectForKey: @"logoUrl"] retain_stub];
    __logoUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"merchantImageUrl"])
  {
    __merchantImageUrl = [[decoder decodeObjectForKey: @"merchantImageUrl"] retain_stub];
    __merchantImageUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"phone"])
  {
    __phone = [[decoder decodeObjectForKey: @"phone"] retain_stub];
    __phone_isset = YES;
  }
  if ([decoder containsValueForKey: @"location"])
  {
    __location = [[decoder decodeObjectForKey: @"location"] retain_stub];
    __location_isset = YES;
  }
  if ([decoder containsValueForKey: @"address"])
  {
    __address = [[decoder decodeObjectForKey: @"address"] retain_stub];
    __address_isset = YES;
  }
  if ([decoder containsValueForKey: @"distanceInMeters"])
  {
    __distanceInMeters = [decoder decodeDoubleForKey: @"distanceInMeters"];
    __distanceInMeters_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__locationId_isset)
  {
    [encoder encodeInt64: __locationId forKey: @"locationId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
  if (__websiteUrl_isset)
  {
    [encoder encodeObject: __websiteUrl forKey: @"websiteUrl"];
  }
  if (__logoUrl_isset)
  {
    [encoder encodeObject: __logoUrl forKey: @"logoUrl"];
  }
  if (__merchantImageUrl_isset)
  {
    [encoder encodeObject: __merchantImageUrl forKey: @"merchantImageUrl"];
  }
  if (__phone_isset)
  {
    [encoder encodeObject: __phone forKey: @"phone"];
  }
  if (__location_isset)
  {
    [encoder encodeObject: __location forKey: @"location"];
  }
  if (__address_isset)
  {
    [encoder encodeObject: __address forKey: @"address"];
  }
  if (__distanceInMeters_isset)
  {
    [encoder encodeDouble: __distanceInMeters forKey: @"distanceInMeters"];
  }
}

- (void) dealloc
{
  [__name release_stub];
  [__email release_stub];
  [__websiteUrl release_stub];
  [__logoUrl release_stub];
  [__merchantImageUrl release_stub];
  [__phone release_stub];
  [__location release_stub];
  [__address release_stub];
  [super dealloc_stub];
}

- (int64_t) locationId {
  return __locationId;
}

- (void) setLocationId: (int64_t) locationId {
  __locationId = locationId;
  __locationId_isset = YES;
}

- (BOOL) locationIdIsSet {
  return __locationId_isset;
}

- (void) unsetLocationId {
  __locationId_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (NSString *) websiteUrl {
  return [[__websiteUrl retain_stub] autorelease_stub];
}

- (void) setWebsiteUrl: (NSString *) websiteUrl {
  [websiteUrl retain_stub];
  [__websiteUrl release_stub];
  __websiteUrl = websiteUrl;
  __websiteUrl_isset = YES;
}

- (BOOL) websiteUrlIsSet {
  return __websiteUrl_isset;
}

- (void) unsetWebsiteUrl {
  [__websiteUrl release_stub];
  __websiteUrl = nil;
  __websiteUrl_isset = NO;
}

- (NSString *) logoUrl {
  return [[__logoUrl retain_stub] autorelease_stub];
}

- (void) setLogoUrl: (NSString *) logoUrl {
  [logoUrl retain_stub];
  [__logoUrl release_stub];
  __logoUrl = logoUrl;
  __logoUrl_isset = YES;
}

- (BOOL) logoUrlIsSet {
  return __logoUrl_isset;
}

- (void) unsetLogoUrl {
  [__logoUrl release_stub];
  __logoUrl = nil;
  __logoUrl_isset = NO;
}

- (NSString *) merchantImageUrl {
  return [[__merchantImageUrl retain_stub] autorelease_stub];
}

- (void) setMerchantImageUrl: (NSString *) merchantImageUrl {
  [merchantImageUrl retain_stub];
  [__merchantImageUrl release_stub];
  __merchantImageUrl = merchantImageUrl;
  __merchantImageUrl_isset = YES;
}

- (BOOL) merchantImageUrlIsSet {
  return __merchantImageUrl_isset;
}

- (void) unsetMerchantImageUrl {
  [__merchantImageUrl release_stub];
  __merchantImageUrl = nil;
  __merchantImageUrl_isset = NO;
}

- (NSString *) phone {
  return [[__phone retain_stub] autorelease_stub];
}

- (void) setPhone: (NSString *) phone {
  [phone retain_stub];
  [__phone release_stub];
  __phone = phone;
  __phone_isset = YES;
}

- (BOOL) phoneIsSet {
  return __phone_isset;
}

- (void) unsetPhone {
  [__phone release_stub];
  __phone = nil;
  __phone_isset = NO;
}

- (Location_t *) location {
  return [[__location retain_stub] autorelease_stub];
}

- (void) setLocation: (Location_t *) location {
  [location retain_stub];
  [__location release_stub];
  __location = location;
  __location_isset = YES;
}

- (BOOL) locationIsSet {
  return __location_isset;
}

- (void) unsetLocation {
  [__location release_stub];
  __location = nil;
  __location_isset = NO;
}

- (Address_t *) address {
  return [[__address retain_stub] autorelease_stub];
}

- (void) setAddress: (Address_t *) address {
  [address retain_stub];
  [__address release_stub];
  __address = address;
  __address_isset = YES;
}

- (BOOL) addressIsSet {
  return __address_isset;
}

- (void) unsetAddress {
  [__address release_stub];
  __address = nil;
  __address_isset = NO;
}

- (double) distanceInMeters {
  return __distanceInMeters;
}

- (void) setDistanceInMeters: (double) distanceInMeters {
  __distanceInMeters = distanceInMeters;
  __distanceInMeters_isset = YES;
}

- (BOOL) distanceInMetersIsSet {
  return __distanceInMeters_isset;
}

- (void) unsetDistanceInMeters {
  __distanceInMeters_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setLocationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setWebsiteUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLogoUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMerchantImageUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhone: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRUCT) {
          Location_t *fieldValue = [[Location_t alloc] init];
          [fieldValue read: inProtocol];
          [self setLocation: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRUCT) {
          Address_t *fieldValue = [[Address_t alloc] init];
          [fieldValue read: inProtocol];
          [self setAddress: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setDistanceInMeters: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MerchantLocation_t"];
  if (__locationId_isset) {
    [outProtocol writeFieldBeginWithName: @"locationId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __locationId];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  if (__websiteUrl_isset) {
    if (__websiteUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"websiteUrl" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __websiteUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__logoUrl_isset) {
    if (__logoUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"logoUrl" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __logoUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__merchantImageUrl_isset) {
    if (__merchantImageUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"merchantImageUrl" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __merchantImageUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__phone_isset) {
    if (__phone != nil) {
      [outProtocol writeFieldBeginWithName: @"phone" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __phone];
      [outProtocol writeFieldEnd];
    }
  }
  if (__location_isset) {
    if (__location != nil) {
      [outProtocol writeFieldBeginWithName: @"location" type: TType_STRUCT fieldID: 8];
      [__location write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__address_isset) {
    if (__address != nil) {
      [outProtocol writeFieldBeginWithName: @"address" type: TType_STRUCT fieldID: 9];
      [__address write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__distanceInMeters_isset) {
    [outProtocol writeFieldBeginWithName: @"distanceInMeters" type: TType_DOUBLE fieldID: 10];
    [outProtocol writeDouble: __distanceInMeters];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MerchantLocation_t("];
  [ms appendString: @"locationId:"];
  [ms appendFormat: @"%qi", __locationId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @",websiteUrl:"];
  [ms appendFormat: @"\"%@\"", __websiteUrl];
  [ms appendString: @",logoUrl:"];
  [ms appendFormat: @"\"%@\"", __logoUrl];
  [ms appendString: @",merchantImageUrl:"];
  [ms appendFormat: @"\"%@\"", __merchantImageUrl];
  [ms appendString: @",phone:"];
  [ms appendFormat: @"\"%@\"", __phone];
  [ms appendString: @",location:"];
  [ms appendFormat: @"%@", __location];
  [ms appendString: @",address:"];
  [ms appendFormat: @"%@", __address];
  [ms appendString: @",distanceInMeters:"];
  [ms appendFormat: @"%f", __distanceInMeters];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Customer_t

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCustomerId: (NSString *) customerId firstName: (NSString *) firstName lastName: (NSString *) lastName email: (NSString *) email sex: (int) sex birthDate: (Timestamp) birthDate socialAccounts: (NSMutableDictionary *) socialAccounts created: (Timestamp) created updated: (Timestamp) updated
{
  self = [super init];
  __customerId = [customerId retain_stub];
  __customerId_isset = YES;
  __firstName = [firstName retain_stub];
  __firstName_isset = YES;
  __lastName = [lastName retain_stub];
  __lastName_isset = YES;
  __email = [email retain_stub];
  __email_isset = YES;
  __sex = sex;
  __sex_isset = YES;
  __birthDate = birthDate;
  __birthDate_isset = YES;
  __socialAccounts = [socialAccounts retain_stub];
  __socialAccounts_isset = YES;
  __created = created;
  __created_isset = YES;
  __updated = updated;
  __updated_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"customerId"])
  {
    __customerId = [[decoder decodeObjectForKey: @"customerId"] retain_stub];
    __customerId_isset = YES;
  }
  if ([decoder containsValueForKey: @"firstName"])
  {
    __firstName = [[decoder decodeObjectForKey: @"firstName"] retain_stub];
    __firstName_isset = YES;
  }
  if ([decoder containsValueForKey: @"lastName"])
  {
    __lastName = [[decoder decodeObjectForKey: @"lastName"] retain_stub];
    __lastName_isset = YES;
  }
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  if ([decoder containsValueForKey: @"sex"])
  {
    __sex = [decoder decodeIntForKey: @"sex"];
    __sex_isset = YES;
  }
  if ([decoder containsValueForKey: @"birthDate"])
  {
    __birthDate = [decoder decodeInt64ForKey: @"birthDate"];
    __birthDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"socialAccounts"])
  {
    __socialAccounts = [[decoder decodeObjectForKey: @"socialAccounts"] retain_stub];
    __socialAccounts_isset = YES;
  }
  if ([decoder containsValueForKey: @"created"])
  {
    __created = [decoder decodeInt64ForKey: @"created"];
    __created_isset = YES;
  }
  if ([decoder containsValueForKey: @"updated"])
  {
    __updated = [decoder decodeInt64ForKey: @"updated"];
    __updated_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__customerId_isset)
  {
    [encoder encodeObject: __customerId forKey: @"customerId"];
  }
  if (__firstName_isset)
  {
    [encoder encodeObject: __firstName forKey: @"firstName"];
  }
  if (__lastName_isset)
  {
    [encoder encodeObject: __lastName forKey: @"lastName"];
  }
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
  if (__sex_isset)
  {
    [encoder encodeInt: __sex forKey: @"sex"];
  }
  if (__birthDate_isset)
  {
    [encoder encodeInt64: __birthDate forKey: @"birthDate"];
  }
  if (__socialAccounts_isset)
  {
    [encoder encodeObject: __socialAccounts forKey: @"socialAccounts"];
  }
  if (__created_isset)
  {
    [encoder encodeInt64: __created forKey: @"created"];
  }
  if (__updated_isset)
  {
    [encoder encodeInt64: __updated forKey: @"updated"];
  }
}

- (void) dealloc
{
  [__customerId release_stub];
  [__firstName release_stub];
  [__lastName release_stub];
  [__email release_stub];
  [__socialAccounts release_stub];
  [super dealloc_stub];
}

- (NSString *) customerId {
  return [[__customerId retain_stub] autorelease_stub];
}

- (void) setCustomerId: (NSString *) customerId {
  [customerId retain_stub];
  [__customerId release_stub];
  __customerId = customerId;
  __customerId_isset = YES;
}

- (BOOL) customerIdIsSet {
  return __customerId_isset;
}

- (void) unsetCustomerId {
  [__customerId release_stub];
  __customerId = nil;
  __customerId_isset = NO;
}

- (NSString *) firstName {
  return [[__firstName retain_stub] autorelease_stub];
}

- (void) setFirstName: (NSString *) firstName {
  [firstName retain_stub];
  [__firstName release_stub];
  __firstName = firstName;
  __firstName_isset = YES;
}

- (BOOL) firstNameIsSet {
  return __firstName_isset;
}

- (void) unsetFirstName {
  [__firstName release_stub];
  __firstName = nil;
  __firstName_isset = NO;
}

- (NSString *) lastName {
  return [[__lastName retain_stub] autorelease_stub];
}

- (void) setLastName: (NSString *) lastName {
  [lastName retain_stub];
  [__lastName release_stub];
  __lastName = lastName;
  __lastName_isset = YES;
}

- (BOOL) lastNameIsSet {
  return __lastName_isset;
}

- (void) unsetLastName {
  [__lastName release_stub];
  __lastName = nil;
  __lastName_isset = NO;
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (int) sex {
  return __sex;
}

- (void) setSex: (int) sex {
  __sex = sex;
  __sex_isset = YES;
}

- (BOOL) sexIsSet {
  return __sex_isset;
}

- (void) unsetSex {
  __sex_isset = NO;
}

- (int64_t) birthDate {
  return __birthDate;
}

- (void) setBirthDate: (int64_t) birthDate {
  __birthDate = birthDate;
  __birthDate_isset = YES;
}

- (BOOL) birthDateIsSet {
  return __birthDate_isset;
}

- (void) unsetBirthDate {
  __birthDate_isset = NO;
}

- (NSMutableDictionary *) socialAccounts {
  return [[__socialAccounts retain_stub] autorelease_stub];
}

- (void) setSocialAccounts: (NSMutableDictionary *) socialAccounts {
  [socialAccounts retain_stub];
  [__socialAccounts release_stub];
  __socialAccounts = socialAccounts;
  __socialAccounts_isset = YES;
}

- (BOOL) socialAccountsIsSet {
  return __socialAccounts_isset;
}

- (void) unsetSocialAccounts {
  [__socialAccounts release_stub];
  __socialAccounts = nil;
  __socialAccounts_isset = NO;
}

- (int64_t) created {
  return __created;
}

- (void) setCreated: (int64_t) created {
  __created = created;
  __created_isset = YES;
}

- (BOOL) createdIsSet {
  return __created_isset;
}

- (void) unsetCreated {
  __created_isset = NO;
}

- (int64_t) updated {
  return __updated;
}

- (void) setUpdated: (int64_t) updated {
  __updated = updated;
  __updated_isset = YES;
}

- (BOOL) updatedIsSet {
  return __updated_isset;
}

- (void) unsetUpdated {
  __updated_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCustomerId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFirstName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLastName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setSex: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setBirthDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_MAP) {
          int _size0;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size0];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            int _key2 = [inProtocol readI32];
            SocialAccount_t *_val3 = [[SocialAccount_t alloc] init];
            [_val3 read: inProtocol];
            [fieldValue setObject: _val3 forKey: [NSNumber numberWithInt: _key2]];
            [_val3 release_stub];
          }
          [inProtocol readMapEnd];
          [self setSocialAccounts: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCreated: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUpdated: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Customer_t"];
  if (__customerId_isset) {
    if (__customerId != nil) {
      [outProtocol writeFieldBeginWithName: @"customerId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __customerId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__firstName_isset) {
    if (__firstName != nil) {
      [outProtocol writeFieldBeginWithName: @"firstName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __firstName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lastName_isset) {
    if (__lastName != nil) {
      [outProtocol writeFieldBeginWithName: @"lastName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __lastName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sex_isset) {
    [outProtocol writeFieldBeginWithName: @"sex" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __sex];
    [outProtocol writeFieldEnd];
  }
  if (__birthDate_isset) {
    [outProtocol writeFieldBeginWithName: @"birthDate" type: TType_I64 fieldID: 7];
    [outProtocol writeI64: __birthDate];
    [outProtocol writeFieldEnd];
  }
  if (__socialAccounts_isset) {
    if (__socialAccounts != nil) {
      [outProtocol writeFieldBeginWithName: @"socialAccounts" type: TType_MAP fieldID: 8];
      {
        [outProtocol writeMapBeginWithKeyType: TType_I32 valueType: TType_STRUCT size: [__socialAccounts count]];
        NSEnumerator * _iter4 = [__socialAccounts keyEnumerator];
        id key5;
        while ((key5 = [_iter4 nextObject]))
        {
          [outProtocol writeI32: [key5 intValue]];
          [[__socialAccounts objectForKey: key5] write: outProtocol];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__created_isset) {
    [outProtocol writeFieldBeginWithName: @"created" type: TType_I64 fieldID: 9];
    [outProtocol writeI64: __created];
    [outProtocol writeFieldEnd];
  }
  if (__updated_isset) {
    [outProtocol writeFieldBeginWithName: @"updated" type: TType_I64 fieldID: 10];
    [outProtocol writeI64: __updated];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Customer_t("];
  [ms appendString: @"customerId:"];
  [ms appendFormat: @"\"%@\"", __customerId];
  [ms appendString: @",firstName:"];
  [ms appendFormat: @"\"%@\"", __firstName];
  [ms appendString: @",lastName:"];
  [ms appendFormat: @"\"%@\"", __lastName];
  [ms appendString: @",email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @",sex:"];
  [ms appendFormat: @"%i", __sex];
  [ms appendString: @",birthDate:"];
  [ms appendFormat: @"%qi", __birthDate];
  [ms appendString: @",socialAccounts:"];
  [ms appendFormat: @"%@", __socialAccounts];
  [ms appendString: @",created:"];
  [ms appendFormat: @"%qi", __created];
  [ms appendString: @",updated:"];
  [ms appendFormat: @"%qi", __updated];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Token_t

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAccountId: (NSString *) accountId email: (NSString *) email expires: (Timestamp) expires
{
  self = [super init];
  __accountId = [accountId retain_stub];
  __accountId_isset = YES;
  __email = [email retain_stub];
  __email_isset = YES;
  __expires = expires;
  __expires_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"accountId"])
  {
    __accountId = [[decoder decodeObjectForKey: @"accountId"] retain_stub];
    __accountId_isset = YES;
  }
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  if ([decoder containsValueForKey: @"expires"])
  {
    __expires = [decoder decodeInt64ForKey: @"expires"];
    __expires_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__accountId_isset)
  {
    [encoder encodeObject: __accountId forKey: @"accountId"];
  }
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
  if (__expires_isset)
  {
    [encoder encodeInt64: __expires forKey: @"expires"];
  }
}

- (void) dealloc
{
  [__accountId release_stub];
  [__email release_stub];
  [super dealloc_stub];
}

- (NSString *) accountId {
  return [[__accountId retain_stub] autorelease_stub];
}

- (void) setAccountId: (NSString *) accountId {
  [accountId retain_stub];
  [__accountId release_stub];
  __accountId = accountId;
  __accountId_isset = YES;
}

- (BOOL) accountIdIsSet {
  return __accountId_isset;
}

- (void) unsetAccountId {
  [__accountId release_stub];
  __accountId = nil;
  __accountId_isset = NO;
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (int64_t) expires {
  return __expires;
}

- (void) setExpires: (int64_t) expires {
  __expires = expires;
  __expires_isset = YES;
}

- (BOOL) expiresIsSet {
  return __expires_isset;
}

- (void) unsetExpires {
  __expires_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccountId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setExpires: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Token_t"];
  if (__accountId_isset) {
    if (__accountId != nil) {
      [outProtocol writeFieldBeginWithName: @"accountId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __accountId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  if (__expires_isset) {
    [outProtocol writeFieldBeginWithName: @"expires" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __expires];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Token_t("];
  [ms appendString: @"accountId:"];
  [ms appendFormat: @"\"%@\"", __accountId];
  [ms appendString: @",email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @",expires:"];
  [ms appendFormat: @"%qi", __expires];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Merchant_t

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMerchantId: (NSString *) merchantId name: (NSString *) name category: (Category_t *) category locations: (NSMutableArray *) locations
{
  self = [super init];
  __merchantId = [merchantId retain_stub];
  __merchantId_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __category = [category retain_stub];
  __category_isset = YES;
  __locations = [locations retain_stub];
  __locations_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"merchantId"])
  {
    __merchantId = [[decoder decodeObjectForKey: @"merchantId"] retain_stub];
    __merchantId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"category"])
  {
    __category = [[decoder decodeObjectForKey: @"category"] retain_stub];
    __category_isset = YES;
  }
  if ([decoder containsValueForKey: @"locations"])
  {
    __locations = [[decoder decodeObjectForKey: @"locations"] retain_stub];
    __locations_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__merchantId_isset)
  {
    [encoder encodeObject: __merchantId forKey: @"merchantId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__category_isset)
  {
    [encoder encodeObject: __category forKey: @"category"];
  }
  if (__locations_isset)
  {
    [encoder encodeObject: __locations forKey: @"locations"];
  }
}

- (void) dealloc
{
  [__merchantId release_stub];
  [__name release_stub];
  [__category release_stub];
  [__locations release_stub];
  [super dealloc_stub];
}

- (NSString *) merchantId {
  return [[__merchantId retain_stub] autorelease_stub];
}

- (void) setMerchantId: (NSString *) merchantId {
  [merchantId retain_stub];
  [__merchantId release_stub];
  __merchantId = merchantId;
  __merchantId_isset = YES;
}

- (BOOL) merchantIdIsSet {
  return __merchantId_isset;
}

- (void) unsetMerchantId {
  [__merchantId release_stub];
  __merchantId = nil;
  __merchantId_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (Category_t *) category {
  return [[__category retain_stub] autorelease_stub];
}

- (void) setCategory: (Category_t *) category {
  [category retain_stub];
  [__category release_stub];
  __category = category;
  __category_isset = YES;
}

- (BOOL) categoryIsSet {
  return __category_isset;
}

- (void) unsetCategory {
  [__category release_stub];
  __category = nil;
  __category_isset = NO;
}

- (NSMutableArray *) locations {
  return [[__locations retain_stub] autorelease_stub];
}

- (void) setLocations: (NSMutableArray *) locations {
  [locations retain_stub];
  [__locations release_stub];
  __locations = locations;
  __locations_isset = YES;
}

- (BOOL) locationsIsSet {
  return __locations_isset;
}

- (void) unsetLocations {
  [__locations release_stub];
  __locations = nil;
  __locations_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMerchantId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          Category_t *fieldValue = [[Category_t alloc] init];
          [fieldValue read: inProtocol];
          [self setCategory: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size6;
          [inProtocol readListBeginReturningElementType: NULL size: &_size6];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size6];
          int _i7;
          for (_i7 = 0; _i7 < _size6; ++_i7)
          {
            MerchantLocation_t *_elem8 = [[MerchantLocation_t alloc] init];
            [_elem8 read: inProtocol];
            [fieldValue addObject: _elem8];
            [_elem8 release_stub];
          }
          [inProtocol readListEnd];
          [self setLocations: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Merchant_t"];
  if (__merchantId_isset) {
    if (__merchantId != nil) {
      [outProtocol writeFieldBeginWithName: @"merchantId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __merchantId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__category_isset) {
    if (__category != nil) {
      [outProtocol writeFieldBeginWithName: @"category" type: TType_STRUCT fieldID: 3];
      [__category write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__locations_isset) {
    if (__locations != nil) {
      [outProtocol writeFieldBeginWithName: @"locations" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__locations count]];
        int i10;
        for (i10 = 0; i10 < [__locations count]; i10++)
        {
          [[__locations objectAtIndex: i10] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Merchant_t("];
  [ms appendString: @"merchantId:"];
  [ms appendFormat: @"\"%@\"", __merchantId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",category:"];
  [ms appendFormat: @"%@", __category];
  [ms appendString: @",locations:"];
  [ms appendFormat: @"%@", __locations];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Deal_t

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDealId: (NSString *) dealId merchant: (Merchant_t *) merchant dealOfferId: (NSString *) dealOfferId title: (NSString *) title summary: (NSString *) summary details: (NSString *) details code: (NSString *) code imageUrl: (NSString *) imageUrl expires: (Timestamp) expires created: (Timestamp) created updated: (Timestamp) updated
{
  self = [super init];
  __dealId = [dealId retain_stub];
  __dealId_isset = YES;
  __merchant = [merchant retain_stub];
  __merchant_isset = YES;
  __dealOfferId = [dealOfferId retain_stub];
  __dealOfferId_isset = YES;
  __title = [title retain_stub];
  __title_isset = YES;
  __summary = [summary retain_stub];
  __summary_isset = YES;
  __details = [details retain_stub];
  __details_isset = YES;
  __code = [code retain_stub];
  __code_isset = YES;
  __imageUrl = [imageUrl retain_stub];
  __imageUrl_isset = YES;
  __expires = expires;
  __expires_isset = YES;
  __created = created;
  __created_isset = YES;
  __updated = updated;
  __updated_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"dealId"])
  {
    __dealId = [[decoder decodeObjectForKey: @"dealId"] retain_stub];
    __dealId_isset = YES;
  }
  if ([decoder containsValueForKey: @"merchant"])
  {
    __merchant = [[decoder decodeObjectForKey: @"merchant"] retain_stub];
    __merchant_isset = YES;
  }
  if ([decoder containsValueForKey: @"dealOfferId"])
  {
    __dealOfferId = [[decoder decodeObjectForKey: @"dealOfferId"] retain_stub];
    __dealOfferId_isset = YES;
  }
  if ([decoder containsValueForKey: @"title"])
  {
    __title = [[decoder decodeObjectForKey: @"title"] retain_stub];
    __title_isset = YES;
  }
  if ([decoder containsValueForKey: @"summary"])
  {
    __summary = [[decoder decodeObjectForKey: @"summary"] retain_stub];
    __summary_isset = YES;
  }
  if ([decoder containsValueForKey: @"details"])
  {
    __details = [[decoder decodeObjectForKey: @"details"] retain_stub];
    __details_isset = YES;
  }
  if ([decoder containsValueForKey: @"code"])
  {
    __code = [[decoder decodeObjectForKey: @"code"] retain_stub];
    __code_isset = YES;
  }
  if ([decoder containsValueForKey: @"imageUrl"])
  {
    __imageUrl = [[decoder decodeObjectForKey: @"imageUrl"] retain_stub];
    __imageUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"expires"])
  {
    __expires = [decoder decodeInt64ForKey: @"expires"];
    __expires_isset = YES;
  }
  if ([decoder containsValueForKey: @"created"])
  {
    __created = [decoder decodeInt64ForKey: @"created"];
    __created_isset = YES;
  }
  if ([decoder containsValueForKey: @"updated"])
  {
    __updated = [decoder decodeInt64ForKey: @"updated"];
    __updated_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__dealId_isset)
  {
    [encoder encodeObject: __dealId forKey: @"dealId"];
  }
  if (__merchant_isset)
  {
    [encoder encodeObject: __merchant forKey: @"merchant"];
  }
  if (__dealOfferId_isset)
  {
    [encoder encodeObject: __dealOfferId forKey: @"dealOfferId"];
  }
  if (__title_isset)
  {
    [encoder encodeObject: __title forKey: @"title"];
  }
  if (__summary_isset)
  {
    [encoder encodeObject: __summary forKey: @"summary"];
  }
  if (__details_isset)
  {
    [encoder encodeObject: __details forKey: @"details"];
  }
  if (__code_isset)
  {
    [encoder encodeObject: __code forKey: @"code"];
  }
  if (__imageUrl_isset)
  {
    [encoder encodeObject: __imageUrl forKey: @"imageUrl"];
  }
  if (__expires_isset)
  {
    [encoder encodeInt64: __expires forKey: @"expires"];
  }
  if (__created_isset)
  {
    [encoder encodeInt64: __created forKey: @"created"];
  }
  if (__updated_isset)
  {
    [encoder encodeInt64: __updated forKey: @"updated"];
  }
}

- (void) dealloc
{
  [__dealId release_stub];
  [__merchant release_stub];
  [__dealOfferId release_stub];
  [__title release_stub];
  [__summary release_stub];
  [__details release_stub];
  [__code release_stub];
  [__imageUrl release_stub];
  [super dealloc_stub];
}

- (NSString *) dealId {
  return [[__dealId retain_stub] autorelease_stub];
}

- (void) setDealId: (NSString *) dealId {
  [dealId retain_stub];
  [__dealId release_stub];
  __dealId = dealId;
  __dealId_isset = YES;
}

- (BOOL) dealIdIsSet {
  return __dealId_isset;
}

- (void) unsetDealId {
  [__dealId release_stub];
  __dealId = nil;
  __dealId_isset = NO;
}

- (Merchant_t *) merchant {
  return [[__merchant retain_stub] autorelease_stub];
}

- (void) setMerchant: (Merchant_t *) merchant {
  [merchant retain_stub];
  [__merchant release_stub];
  __merchant = merchant;
  __merchant_isset = YES;
}

- (BOOL) merchantIsSet {
  return __merchant_isset;
}

- (void) unsetMerchant {
  [__merchant release_stub];
  __merchant = nil;
  __merchant_isset = NO;
}

- (NSString *) dealOfferId {
  return [[__dealOfferId retain_stub] autorelease_stub];
}

- (void) setDealOfferId: (NSString *) dealOfferId {
  [dealOfferId retain_stub];
  [__dealOfferId release_stub];
  __dealOfferId = dealOfferId;
  __dealOfferId_isset = YES;
}

- (BOOL) dealOfferIdIsSet {
  return __dealOfferId_isset;
}

- (void) unsetDealOfferId {
  [__dealOfferId release_stub];
  __dealOfferId = nil;
  __dealOfferId_isset = NO;
}

- (NSString *) title {
  return [[__title retain_stub] autorelease_stub];
}

- (void) setTitle: (NSString *) title {
  [title retain_stub];
  [__title release_stub];
  __title = title;
  __title_isset = YES;
}

- (BOOL) titleIsSet {
  return __title_isset;
}

- (void) unsetTitle {
  [__title release_stub];
  __title = nil;
  __title_isset = NO;
}

- (NSString *) summary {
  return [[__summary retain_stub] autorelease_stub];
}

- (void) setSummary: (NSString *) summary {
  [summary retain_stub];
  [__summary release_stub];
  __summary = summary;
  __summary_isset = YES;
}

- (BOOL) summaryIsSet {
  return __summary_isset;
}

- (void) unsetSummary {
  [__summary release_stub];
  __summary = nil;
  __summary_isset = NO;
}

- (NSString *) details {
  return [[__details retain_stub] autorelease_stub];
}

- (void) setDetails: (NSString *) details {
  [details retain_stub];
  [__details release_stub];
  __details = details;
  __details_isset = YES;
}

- (BOOL) detailsIsSet {
  return __details_isset;
}

- (void) unsetDetails {
  [__details release_stub];
  __details = nil;
  __details_isset = NO;
}

- (NSString *) code {
  return [[__code retain_stub] autorelease_stub];
}

- (void) setCode: (NSString *) code {
  [code retain_stub];
  [__code release_stub];
  __code = code;
  __code_isset = YES;
}

- (BOOL) codeIsSet {
  return __code_isset;
}

- (void) unsetCode {
  [__code release_stub];
  __code = nil;
  __code_isset = NO;
}

- (NSString *) imageUrl {
  return [[__imageUrl retain_stub] autorelease_stub];
}

- (void) setImageUrl: (NSString *) imageUrl {
  [imageUrl retain_stub];
  [__imageUrl release_stub];
  __imageUrl = imageUrl;
  __imageUrl_isset = YES;
}

- (BOOL) imageUrlIsSet {
  return __imageUrl_isset;
}

- (void) unsetImageUrl {
  [__imageUrl release_stub];
  __imageUrl = nil;
  __imageUrl_isset = NO;
}

- (int64_t) expires {
  return __expires;
}

- (void) setExpires: (int64_t) expires {
  __expires = expires;
  __expires_isset = YES;
}

- (BOOL) expiresIsSet {
  return __expires_isset;
}

- (void) unsetExpires {
  __expires_isset = NO;
}

- (int64_t) created {
  return __created;
}

- (void) setCreated: (int64_t) created {
  __created = created;
  __created_isset = YES;
}

- (BOOL) createdIsSet {
  return __created_isset;
}

- (void) unsetCreated {
  __created_isset = NO;
}

- (int64_t) updated {
  return __updated;
}

- (void) setUpdated: (int64_t) updated {
  __updated = updated;
  __updated_isset = YES;
}

- (BOOL) updatedIsSet {
  return __updated_isset;
}

- (void) unsetUpdated {
  __updated_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDealId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Merchant_t *fieldValue = [[Merchant_t alloc] init];
          [fieldValue read: inProtocol];
          [self setMerchant: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDealOfferId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSummary: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDetails: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setImageUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setExpires: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCreated: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUpdated: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Deal_t"];
  if (__dealId_isset) {
    if (__dealId != nil) {
      [outProtocol writeFieldBeginWithName: @"dealId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __dealId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__merchant_isset) {
    if (__merchant != nil) {
      [outProtocol writeFieldBeginWithName: @"merchant" type: TType_STRUCT fieldID: 2];
      [__merchant write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__dealOfferId_isset) {
    if (__dealOfferId != nil) {
      [outProtocol writeFieldBeginWithName: @"dealOfferId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __dealOfferId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__title_isset) {
    if (__title != nil) {
      [outProtocol writeFieldBeginWithName: @"title" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __title];
      [outProtocol writeFieldEnd];
    }
  }
  if (__summary_isset) {
    if (__summary != nil) {
      [outProtocol writeFieldBeginWithName: @"summary" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __summary];
      [outProtocol writeFieldEnd];
    }
  }
  if (__details_isset) {
    if (__details != nil) {
      [outProtocol writeFieldBeginWithName: @"details" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __details];
      [outProtocol writeFieldEnd];
    }
  }
  if (__code_isset) {
    if (__code != nil) {
      [outProtocol writeFieldBeginWithName: @"code" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __code];
      [outProtocol writeFieldEnd];
    }
  }
  if (__imageUrl_isset) {
    if (__imageUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"imageUrl" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __imageUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__expires_isset) {
    [outProtocol writeFieldBeginWithName: @"expires" type: TType_I64 fieldID: 9];
    [outProtocol writeI64: __expires];
    [outProtocol writeFieldEnd];
  }
  if (__created_isset) {
    [outProtocol writeFieldBeginWithName: @"created" type: TType_I64 fieldID: 10];
    [outProtocol writeI64: __created];
    [outProtocol writeFieldEnd];
  }
  if (__updated_isset) {
    [outProtocol writeFieldBeginWithName: @"updated" type: TType_I64 fieldID: 11];
    [outProtocol writeI64: __updated];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Deal_t("];
  [ms appendString: @"dealId:"];
  [ms appendFormat: @"\"%@\"", __dealId];
  [ms appendString: @",merchant:"];
  [ms appendFormat: @"%@", __merchant];
  [ms appendString: @",dealOfferId:"];
  [ms appendFormat: @"\"%@\"", __dealOfferId];
  [ms appendString: @",title:"];
  [ms appendFormat: @"\"%@\"", __title];
  [ms appendString: @",summary:"];
  [ms appendFormat: @"\"%@\"", __summary];
  [ms appendString: @",details:"];
  [ms appendFormat: @"\"%@\"", __details];
  [ms appendString: @",code:"];
  [ms appendFormat: @"\"%@\"", __code];
  [ms appendString: @",imageUrl:"];
  [ms appendFormat: @"\"%@\"", __imageUrl];
  [ms appendString: @",expires:"];
  [ms appendFormat: @"%qi", __expires];
  [ms appendString: @",created:"];
  [ms appendFormat: @"%qi", __created];
  [ms appendString: @",updated:"];
  [ms appendFormat: @"%qi", __updated];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation DealOffer_t

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDealOfferId: (NSString *) dealOfferId merchant: (Merchant_t *) merchant dealType: (int) dealType title: (NSString *) title summary: (NSString *) summary code: (NSString *) code imageUrl: (NSString *) imageUrl price: (double) price expires: (Timestamp) expires
{
  self = [super init];
  __dealOfferId = [dealOfferId retain_stub];
  __dealOfferId_isset = YES;
  __merchant = [merchant retain_stub];
  __merchant_isset = YES;
  __dealType = dealType;
  __dealType_isset = YES;
  __title = [title retain_stub];
  __title_isset = YES;
  __summary = [summary retain_stub];
  __summary_isset = YES;
  __code = [code retain_stub];
  __code_isset = YES;
  __imageUrl = [imageUrl retain_stub];
  __imageUrl_isset = YES;
  __price = price;
  __price_isset = YES;
  __expires = expires;
  __expires_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"dealOfferId"])
  {
    __dealOfferId = [[decoder decodeObjectForKey: @"dealOfferId"] retain_stub];
    __dealOfferId_isset = YES;
  }
  if ([decoder containsValueForKey: @"merchant"])
  {
    __merchant = [[decoder decodeObjectForKey: @"merchant"] retain_stub];
    __merchant_isset = YES;
  }
  if ([decoder containsValueForKey: @"dealType"])
  {
    __dealType = [decoder decodeIntForKey: @"dealType"];
    __dealType_isset = YES;
  }
  if ([decoder containsValueForKey: @"title"])
  {
    __title = [[decoder decodeObjectForKey: @"title"] retain_stub];
    __title_isset = YES;
  }
  if ([decoder containsValueForKey: @"summary"])
  {
    __summary = [[decoder decodeObjectForKey: @"summary"] retain_stub];
    __summary_isset = YES;
  }
  if ([decoder containsValueForKey: @"code"])
  {
    __code = [[decoder decodeObjectForKey: @"code"] retain_stub];
    __code_isset = YES;
  }
  if ([decoder containsValueForKey: @"imageUrl"])
  {
    __imageUrl = [[decoder decodeObjectForKey: @"imageUrl"] retain_stub];
    __imageUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"price"])
  {
    __price = [decoder decodeDoubleForKey: @"price"];
    __price_isset = YES;
  }
  if ([decoder containsValueForKey: @"expires"])
  {
    __expires = [decoder decodeInt64ForKey: @"expires"];
    __expires_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__dealOfferId_isset)
  {
    [encoder encodeObject: __dealOfferId forKey: @"dealOfferId"];
  }
  if (__merchant_isset)
  {
    [encoder encodeObject: __merchant forKey: @"merchant"];
  }
  if (__dealType_isset)
  {
    [encoder encodeInt: __dealType forKey: @"dealType"];
  }
  if (__title_isset)
  {
    [encoder encodeObject: __title forKey: @"title"];
  }
  if (__summary_isset)
  {
    [encoder encodeObject: __summary forKey: @"summary"];
  }
  if (__code_isset)
  {
    [encoder encodeObject: __code forKey: @"code"];
  }
  if (__imageUrl_isset)
  {
    [encoder encodeObject: __imageUrl forKey: @"imageUrl"];
  }
  if (__price_isset)
  {
    [encoder encodeDouble: __price forKey: @"price"];
  }
  if (__expires_isset)
  {
    [encoder encodeInt64: __expires forKey: @"expires"];
  }
}

- (void) dealloc
{
  [__dealOfferId release_stub];
  [__merchant release_stub];
  [__title release_stub];
  [__summary release_stub];
  [__code release_stub];
  [__imageUrl release_stub];
  [super dealloc_stub];
}

- (NSString *) dealOfferId {
  return [[__dealOfferId retain_stub] autorelease_stub];
}

- (void) setDealOfferId: (NSString *) dealOfferId {
  [dealOfferId retain_stub];
  [__dealOfferId release_stub];
  __dealOfferId = dealOfferId;
  __dealOfferId_isset = YES;
}

- (BOOL) dealOfferIdIsSet {
  return __dealOfferId_isset;
}

- (void) unsetDealOfferId {
  [__dealOfferId release_stub];
  __dealOfferId = nil;
  __dealOfferId_isset = NO;
}

- (Merchant_t *) merchant {
  return [[__merchant retain_stub] autorelease_stub];
}

- (void) setMerchant: (Merchant_t *) merchant {
  [merchant retain_stub];
  [__merchant release_stub];
  __merchant = merchant;
  __merchant_isset = YES;
}

- (BOOL) merchantIsSet {
  return __merchant_isset;
}

- (void) unsetMerchant {
  [__merchant release_stub];
  __merchant = nil;
  __merchant_isset = NO;
}

- (int) dealType {
  return __dealType;
}

- (void) setDealType: (int) dealType {
  __dealType = dealType;
  __dealType_isset = YES;
}

- (BOOL) dealTypeIsSet {
  return __dealType_isset;
}

- (void) unsetDealType {
  __dealType_isset = NO;
}

- (NSString *) title {
  return [[__title retain_stub] autorelease_stub];
}

- (void) setTitle: (NSString *) title {
  [title retain_stub];
  [__title release_stub];
  __title = title;
  __title_isset = YES;
}

- (BOOL) titleIsSet {
  return __title_isset;
}

- (void) unsetTitle {
  [__title release_stub];
  __title = nil;
  __title_isset = NO;
}

- (NSString *) summary {
  return [[__summary retain_stub] autorelease_stub];
}

- (void) setSummary: (NSString *) summary {
  [summary retain_stub];
  [__summary release_stub];
  __summary = summary;
  __summary_isset = YES;
}

- (BOOL) summaryIsSet {
  return __summary_isset;
}

- (void) unsetSummary {
  [__summary release_stub];
  __summary = nil;
  __summary_isset = NO;
}

- (NSString *) code {
  return [[__code retain_stub] autorelease_stub];
}

- (void) setCode: (NSString *) code {
  [code retain_stub];
  [__code release_stub];
  __code = code;
  __code_isset = YES;
}

- (BOOL) codeIsSet {
  return __code_isset;
}

- (void) unsetCode {
  [__code release_stub];
  __code = nil;
  __code_isset = NO;
}

- (NSString *) imageUrl {
  return [[__imageUrl retain_stub] autorelease_stub];
}

- (void) setImageUrl: (NSString *) imageUrl {
  [imageUrl retain_stub];
  [__imageUrl release_stub];
  __imageUrl = imageUrl;
  __imageUrl_isset = YES;
}

- (BOOL) imageUrlIsSet {
  return __imageUrl_isset;
}

- (void) unsetImageUrl {
  [__imageUrl release_stub];
  __imageUrl = nil;
  __imageUrl_isset = NO;
}

- (double) price {
  return __price;
}

- (void) setPrice: (double) price {
  __price = price;
  __price_isset = YES;
}

- (BOOL) priceIsSet {
  return __price_isset;
}

- (void) unsetPrice {
  __price_isset = NO;
}

- (int64_t) expires {
  return __expires;
}

- (void) setExpires: (int64_t) expires {
  __expires = expires;
  __expires_isset = YES;
}

- (BOOL) expiresIsSet {
  return __expires_isset;
}

- (void) unsetExpires {
  __expires_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDealOfferId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Merchant_t *fieldValue = [[Merchant_t alloc] init];
          [fieldValue read: inProtocol];
          [self setMerchant: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setDealType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSummary: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setImageUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setPrice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setExpires: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DealOffer_t"];
  if (__dealOfferId_isset) {
    if (__dealOfferId != nil) {
      [outProtocol writeFieldBeginWithName: @"dealOfferId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __dealOfferId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__merchant_isset) {
    if (__merchant != nil) {
      [outProtocol writeFieldBeginWithName: @"merchant" type: TType_STRUCT fieldID: 2];
      [__merchant write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__dealType_isset) {
    [outProtocol writeFieldBeginWithName: @"dealType" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __dealType];
    [outProtocol writeFieldEnd];
  }
  if (__title_isset) {
    if (__title != nil) {
      [outProtocol writeFieldBeginWithName: @"title" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __title];
      [outProtocol writeFieldEnd];
    }
  }
  if (__summary_isset) {
    if (__summary != nil) {
      [outProtocol writeFieldBeginWithName: @"summary" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __summary];
      [outProtocol writeFieldEnd];
    }
  }
  if (__code_isset) {
    if (__code != nil) {
      [outProtocol writeFieldBeginWithName: @"code" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __code];
      [outProtocol writeFieldEnd];
    }
  }
  if (__imageUrl_isset) {
    if (__imageUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"imageUrl" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __imageUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__price_isset) {
    [outProtocol writeFieldBeginWithName: @"price" type: TType_DOUBLE fieldID: 8];
    [outProtocol writeDouble: __price];
    [outProtocol writeFieldEnd];
  }
  if (__expires_isset) {
    [outProtocol writeFieldBeginWithName: @"expires" type: TType_I64 fieldID: 9];
    [outProtocol writeI64: __expires];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DealOffer_t("];
  [ms appendString: @"dealOfferId:"];
  [ms appendFormat: @"\"%@\"", __dealOfferId];
  [ms appendString: @",merchant:"];
  [ms appendFormat: @"%@", __merchant];
  [ms appendString: @",dealType:"];
  [ms appendFormat: @"%i", __dealType];
  [ms appendString: @",title:"];
  [ms appendFormat: @"\"%@\"", __title];
  [ms appendString: @",summary:"];
  [ms appendFormat: @"\"%@\"", __summary];
  [ms appendString: @",code:"];
  [ms appendFormat: @"\"%@\"", __code];
  [ms appendString: @",imageUrl:"];
  [ms appendFormat: @"\"%@\"", __imageUrl];
  [ms appendString: @",price:"];
  [ms appendFormat: @"%f", __price];
  [ms appendString: @",expires:"];
  [ms appendFormat: @"%qi", __expires];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SearchOptions_t

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAscending: (BOOL) ascending sortProperty: (NSString *) sortProperty maxResults: (int32_t) maxResults page: (int32_t) page
{
  self = [super init];
  __ascending = ascending;
  __ascending_isset = YES;
  __sortProperty = [sortProperty retain_stub];
  __sortProperty_isset = YES;
  __maxResults = maxResults;
  __maxResults_isset = YES;
  __page = page;
  __page_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ascending"])
  {
    __ascending = [decoder decodeBoolForKey: @"ascending"];
    __ascending_isset = YES;
  }
  if ([decoder containsValueForKey: @"sortProperty"])
  {
    __sortProperty = [[decoder decodeObjectForKey: @"sortProperty"] retain_stub];
    __sortProperty_isset = YES;
  }
  if ([decoder containsValueForKey: @"maxResults"])
  {
    __maxResults = [decoder decodeInt32ForKey: @"maxResults"];
    __maxResults_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [decoder decodeInt32ForKey: @"page"];
    __page_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ascending_isset)
  {
    [encoder encodeBool: __ascending forKey: @"ascending"];
  }
  if (__sortProperty_isset)
  {
    [encoder encodeObject: __sortProperty forKey: @"sortProperty"];
  }
  if (__maxResults_isset)
  {
    [encoder encodeInt32: __maxResults forKey: @"maxResults"];
  }
  if (__page_isset)
  {
    [encoder encodeInt32: __page forKey: @"page"];
  }
}

- (void) dealloc
{
  [__sortProperty release_stub];
  [super dealloc_stub];
}

- (BOOL) ascending {
  return __ascending;
}

- (void) setAscending: (BOOL) ascending {
  __ascending = ascending;
  __ascending_isset = YES;
}

- (BOOL) ascendingIsSet {
  return __ascending_isset;
}

- (void) unsetAscending {
  __ascending_isset = NO;
}

- (NSString *) sortProperty {
  return [[__sortProperty retain_stub] autorelease_stub];
}

- (void) setSortProperty: (NSString *) sortProperty {
  [sortProperty retain_stub];
  [__sortProperty release_stub];
  __sortProperty = sortProperty;
  __sortProperty_isset = YES;
}

- (BOOL) sortPropertyIsSet {
  return __sortProperty_isset;
}

- (void) unsetSortProperty {
  [__sortProperty release_stub];
  __sortProperty = nil;
  __sortProperty_isset = NO;
}

- (int32_t) maxResults {
  return __maxResults;
}

- (void) setMaxResults: (int32_t) maxResults {
  __maxResults = maxResults;
  __maxResults_isset = YES;
}

- (BOOL) maxResultsIsSet {
  return __maxResults_isset;
}

- (void) unsetMaxResults {
  __maxResults_isset = NO;
}

- (int32_t) page {
  return __page;
}

- (void) setPage: (int32_t) page {
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  __page_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setAscending: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSortProperty: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setMaxResults: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SearchOptions_t"];
  if (__ascending_isset) {
    [outProtocol writeFieldBeginWithName: @"ascending" type: TType_BOOL fieldID: 1];
    [outProtocol writeBool: __ascending];
    [outProtocol writeFieldEnd];
  }
  if (__sortProperty_isset) {
    if (__sortProperty != nil) {
      [outProtocol writeFieldBeginWithName: @"sortProperty" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __sortProperty];
      [outProtocol writeFieldEnd];
    }
  }
  if (__maxResults_isset) {
    [outProtocol writeFieldBeginWithName: @"maxResults" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __maxResults];
    [outProtocol writeFieldEnd];
  }
  if (__page_isset) {
    [outProtocol writeFieldBeginWithName: @"page" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __page];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SearchOptions_t("];
  [ms appendString: @"ascending:"];
  [ms appendFormat: @"%i", __ascending];
  [ms appendString: @",sortProperty:"];
  [ms appendFormat: @"\"%@\"", __sortProperty];
  [ms appendString: @",maxResults:"];
  [ms appendFormat: @"%i", __maxResults];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%i", __page];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation DealAcquire_t

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDealAcquireId: (NSString *) dealAcquireId deal: (Deal_t *) deal status: (NSString *) status sharedByCustomer: (Customer_t *) sharedByCustomer shareCount: (int32_t) shareCount redeemed: (Timestamp) redeemed created: (Timestamp) created updated: (Timestamp) updated
{
  self = [super init];
  __dealAcquireId = [dealAcquireId retain_stub];
  __dealAcquireId_isset = YES;
  __deal = [deal retain_stub];
  __deal_isset = YES;
  __status = [status retain_stub];
  __status_isset = YES;
  __sharedByCustomer = [sharedByCustomer retain_stub];
  __sharedByCustomer_isset = YES;
  __shareCount = shareCount;
  __shareCount_isset = YES;
  __redeemed = redeemed;
  __redeemed_isset = YES;
  __created = created;
  __created_isset = YES;
  __updated = updated;
  __updated_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"dealAcquireId"])
  {
    __dealAcquireId = [[decoder decodeObjectForKey: @"dealAcquireId"] retain_stub];
    __dealAcquireId_isset = YES;
  }
  if ([decoder containsValueForKey: @"deal"])
  {
    __deal = [[decoder decodeObjectForKey: @"deal"] retain_stub];
    __deal_isset = YES;
  }
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [[decoder decodeObjectForKey: @"status"] retain_stub];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"sharedByCustomer"])
  {
    __sharedByCustomer = [[decoder decodeObjectForKey: @"sharedByCustomer"] retain_stub];
    __sharedByCustomer_isset = YES;
  }
  if ([decoder containsValueForKey: @"shareCount"])
  {
    __shareCount = [decoder decodeInt32ForKey: @"shareCount"];
    __shareCount_isset = YES;
  }
  if ([decoder containsValueForKey: @"redeemed"])
  {
    __redeemed = [decoder decodeInt64ForKey: @"redeemed"];
    __redeemed_isset = YES;
  }
  if ([decoder containsValueForKey: @"created"])
  {
    __created = [decoder decodeInt64ForKey: @"created"];
    __created_isset = YES;
  }
  if ([decoder containsValueForKey: @"updated"])
  {
    __updated = [decoder decodeInt64ForKey: @"updated"];
    __updated_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__dealAcquireId_isset)
  {
    [encoder encodeObject: __dealAcquireId forKey: @"dealAcquireId"];
  }
  if (__deal_isset)
  {
    [encoder encodeObject: __deal forKey: @"deal"];
  }
  if (__status_isset)
  {
    [encoder encodeObject: __status forKey: @"status"];
  }
  if (__sharedByCustomer_isset)
  {
    [encoder encodeObject: __sharedByCustomer forKey: @"sharedByCustomer"];
  }
  if (__shareCount_isset)
  {
    [encoder encodeInt32: __shareCount forKey: @"shareCount"];
  }
  if (__redeemed_isset)
  {
    [encoder encodeInt64: __redeemed forKey: @"redeemed"];
  }
  if (__created_isset)
  {
    [encoder encodeInt64: __created forKey: @"created"];
  }
  if (__updated_isset)
  {
    [encoder encodeInt64: __updated forKey: @"updated"];
  }
}

- (void) dealloc
{
  [__dealAcquireId release_stub];
  [__deal release_stub];
  [__status release_stub];
  [__sharedByCustomer release_stub];
  [super dealloc_stub];
}

- (NSString *) dealAcquireId {
  return [[__dealAcquireId retain_stub] autorelease_stub];
}

- (void) setDealAcquireId: (NSString *) dealAcquireId {
  [dealAcquireId retain_stub];
  [__dealAcquireId release_stub];
  __dealAcquireId = dealAcquireId;
  __dealAcquireId_isset = YES;
}

- (BOOL) dealAcquireIdIsSet {
  return __dealAcquireId_isset;
}

- (void) unsetDealAcquireId {
  [__dealAcquireId release_stub];
  __dealAcquireId = nil;
  __dealAcquireId_isset = NO;
}

- (Deal_t *) deal {
  return [[__deal retain_stub] autorelease_stub];
}

- (void) setDeal: (Deal_t *) deal {
  [deal retain_stub];
  [__deal release_stub];
  __deal = deal;
  __deal_isset = YES;
}

- (BOOL) dealIsSet {
  return __deal_isset;
}

- (void) unsetDeal {
  [__deal release_stub];
  __deal = nil;
  __deal_isset = NO;
}

- (NSString *) status {
  return [[__status retain_stub] autorelease_stub];
}

- (void) setStatus: (NSString *) status {
  [status retain_stub];
  [__status release_stub];
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  [__status release_stub];
  __status = nil;
  __status_isset = NO;
}

- (Customer_t *) sharedByCustomer {
  return [[__sharedByCustomer retain_stub] autorelease_stub];
}

- (void) setSharedByCustomer: (Customer_t *) sharedByCustomer {
  [sharedByCustomer retain_stub];
  [__sharedByCustomer release_stub];
  __sharedByCustomer = sharedByCustomer;
  __sharedByCustomer_isset = YES;
}

- (BOOL) sharedByCustomerIsSet {
  return __sharedByCustomer_isset;
}

- (void) unsetSharedByCustomer {
  [__sharedByCustomer release_stub];
  __sharedByCustomer = nil;
  __sharedByCustomer_isset = NO;
}

- (int32_t) shareCount {
  return __shareCount;
}

- (void) setShareCount: (int32_t) shareCount {
  __shareCount = shareCount;
  __shareCount_isset = YES;
}

- (BOOL) shareCountIsSet {
  return __shareCount_isset;
}

- (void) unsetShareCount {
  __shareCount_isset = NO;
}

- (int64_t) redeemed {
  return __redeemed;
}

- (void) setRedeemed: (int64_t) redeemed {
  __redeemed = redeemed;
  __redeemed_isset = YES;
}

- (BOOL) redeemedIsSet {
  return __redeemed_isset;
}

- (void) unsetRedeemed {
  __redeemed_isset = NO;
}

- (int64_t) created {
  return __created;
}

- (void) setCreated: (int64_t) created {
  __created = created;
  __created_isset = YES;
}

- (BOOL) createdIsSet {
  return __created_isset;
}

- (void) unsetCreated {
  __created_isset = NO;
}

- (int64_t) updated {
  return __updated;
}

- (void) setUpdated: (int64_t) updated {
  __updated = updated;
  __updated_isset = YES;
}

- (BOOL) updatedIsSet {
  return __updated_isset;
}

- (void) unsetUpdated {
  __updated_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDealAcquireId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Deal_t *fieldValue = [[Deal_t alloc] init];
          [fieldValue read: inProtocol];
          [self setDeal: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          Customer_t *fieldValue = [[Customer_t alloc] init];
          [fieldValue read: inProtocol];
          [self setSharedByCustomer: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setShareCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setRedeemed: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCreated: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUpdated: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DealAcquire_t"];
  if (__dealAcquireId_isset) {
    if (__dealAcquireId != nil) {
      [outProtocol writeFieldBeginWithName: @"dealAcquireId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __dealAcquireId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deal_isset) {
    if (__deal != nil) {
      [outProtocol writeFieldBeginWithName: @"deal" type: TType_STRUCT fieldID: 2];
      [__deal write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__status_isset) {
    if (__status != nil) {
      [outProtocol writeFieldBeginWithName: @"status" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __status];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sharedByCustomer_isset) {
    if (__sharedByCustomer != nil) {
      [outProtocol writeFieldBeginWithName: @"sharedByCustomer" type: TType_STRUCT fieldID: 4];
      [__sharedByCustomer write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__shareCount_isset) {
    [outProtocol writeFieldBeginWithName: @"shareCount" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __shareCount];
    [outProtocol writeFieldEnd];
  }
  if (__redeemed_isset) {
    [outProtocol writeFieldBeginWithName: @"redeemed" type: TType_I64 fieldID: 6];
    [outProtocol writeI64: __redeemed];
    [outProtocol writeFieldEnd];
  }
  if (__created_isset) {
    [outProtocol writeFieldBeginWithName: @"created" type: TType_I64 fieldID: 7];
    [outProtocol writeI64: __created];
    [outProtocol writeFieldEnd];
  }
  if (__updated_isset) {
    [outProtocol writeFieldBeginWithName: @"updated" type: TType_I64 fieldID: 8];
    [outProtocol writeI64: __updated];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DealAcquire_t("];
  [ms appendString: @"dealAcquireId:"];
  [ms appendFormat: @"\"%@\"", __dealAcquireId];
  [ms appendString: @",deal:"];
  [ms appendFormat: @"%@", __deal];
  [ms appendString: @",status:"];
  [ms appendFormat: @"\"%@\"", __status];
  [ms appendString: @",sharedByCustomer:"];
  [ms appendFormat: @"%@", __sharedByCustomer];
  [ms appendString: @",shareCount:"];
  [ms appendFormat: @"%i", __shareCount];
  [ms appendString: @",redeemed:"];
  [ms appendFormat: @"%qi", __redeemed];
  [ms appendString: @",created:"];
  [ms appendFormat: @"%qi", __created];
  [ms appendString: @",updated:"];
  [ms appendFormat: @"%qi", __updated];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Gift_t

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithGiftId: (NSString *) giftId deal: (Deal_t *) deal fromCustomer: (Customer_t *) fromCustomer created: (Timestamp) created
{
  self = [super init];
  __giftId = [giftId retain_stub];
  __giftId_isset = YES;
  __deal = [deal retain_stub];
  __deal_isset = YES;
  __fromCustomer = [fromCustomer retain_stub];
  __fromCustomer_isset = YES;
  __created = created;
  __created_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"giftId"])
  {
    __giftId = [[decoder decodeObjectForKey: @"giftId"] retain_stub];
    __giftId_isset = YES;
  }
  if ([decoder containsValueForKey: @"deal"])
  {
    __deal = [[decoder decodeObjectForKey: @"deal"] retain_stub];
    __deal_isset = YES;
  }
  if ([decoder containsValueForKey: @"fromCustomer"])
  {
    __fromCustomer = [[decoder decodeObjectForKey: @"fromCustomer"] retain_stub];
    __fromCustomer_isset = YES;
  }
  if ([decoder containsValueForKey: @"created"])
  {
    __created = [decoder decodeInt64ForKey: @"created"];
    __created_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__giftId_isset)
  {
    [encoder encodeObject: __giftId forKey: @"giftId"];
  }
  if (__deal_isset)
  {
    [encoder encodeObject: __deal forKey: @"deal"];
  }
  if (__fromCustomer_isset)
  {
    [encoder encodeObject: __fromCustomer forKey: @"fromCustomer"];
  }
  if (__created_isset)
  {
    [encoder encodeInt64: __created forKey: @"created"];
  }
}

- (void) dealloc
{
  [__giftId release_stub];
  [__deal release_stub];
  [__fromCustomer release_stub];
  [super dealloc_stub];
}

- (NSString *) giftId {
  return [[__giftId retain_stub] autorelease_stub];
}

- (void) setGiftId: (NSString *) giftId {
  [giftId retain_stub];
  [__giftId release_stub];
  __giftId = giftId;
  __giftId_isset = YES;
}

- (BOOL) giftIdIsSet {
  return __giftId_isset;
}

- (void) unsetGiftId {
  [__giftId release_stub];
  __giftId = nil;
  __giftId_isset = NO;
}

- (Deal_t *) deal {
  return [[__deal retain_stub] autorelease_stub];
}

- (void) setDeal: (Deal_t *) deal {
  [deal retain_stub];
  [__deal release_stub];
  __deal = deal;
  __deal_isset = YES;
}

- (BOOL) dealIsSet {
  return __deal_isset;
}

- (void) unsetDeal {
  [__deal release_stub];
  __deal = nil;
  __deal_isset = NO;
}

- (Customer_t *) fromCustomer {
  return [[__fromCustomer retain_stub] autorelease_stub];
}

- (void) setFromCustomer: (Customer_t *) fromCustomer {
  [fromCustomer retain_stub];
  [__fromCustomer release_stub];
  __fromCustomer = fromCustomer;
  __fromCustomer_isset = YES;
}

- (BOOL) fromCustomerIsSet {
  return __fromCustomer_isset;
}

- (void) unsetFromCustomer {
  [__fromCustomer release_stub];
  __fromCustomer = nil;
  __fromCustomer_isset = NO;
}

- (int64_t) created {
  return __created;
}

- (void) setCreated: (int64_t) created {
  __created = created;
  __created_isset = YES;
}

- (BOOL) createdIsSet {
  return __created_isset;
}

- (void) unsetCreated {
  __created_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGiftId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Deal_t *fieldValue = [[Deal_t alloc] init];
          [fieldValue read: inProtocol];
          [self setDeal: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          Customer_t *fieldValue = [[Customer_t alloc] init];
          [fieldValue read: inProtocol];
          [self setFromCustomer: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCreated: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Gift_t"];
  if (__giftId_isset) {
    if (__giftId != nil) {
      [outProtocol writeFieldBeginWithName: @"giftId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __giftId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deal_isset) {
    if (__deal != nil) {
      [outProtocol writeFieldBeginWithName: @"deal" type: TType_STRUCT fieldID: 2];
      [__deal write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fromCustomer_isset) {
    if (__fromCustomer != nil) {
      [outProtocol writeFieldBeginWithName: @"fromCustomer" type: TType_STRUCT fieldID: 3];
      [__fromCustomer write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__created_isset) {
    [outProtocol writeFieldBeginWithName: @"created" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __created];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Gift_t("];
  [ms appendString: @"giftId:"];
  [ms appendFormat: @"\"%@\"", __giftId];
  [ms appendString: @",deal:"];
  [ms appendFormat: @"%@", __deal];
  [ms appendString: @",fromCustomer:"];
  [ms appendFormat: @"%@", __fromCustomer];
  [ms appendString: @",created:"];
  [ms appendFormat: @"%qi", __created];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation CoreConstants
+ (void) initialize {
}
@end

